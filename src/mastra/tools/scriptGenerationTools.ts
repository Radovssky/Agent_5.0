import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";
import { generateText } from "ai"; 
import { createOpenAI } from "@ai-sdk/openai";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
export const generateScriptTool = createTool({
  id: "generate-script-tool",
  description: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ",
  inputSchema: z.object({
    topic: z.string().describe("–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è"),
    analyzed_videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      transcript_ru: z.string().optional(),
      keywords: z.array(z.string()),
      engagement_score: z.number(),
      is_viral: z.boolean(),
      viral_factors: z.array(z.string()),
    })).describe("–ú–∞—Å—Å–∏–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"),
    content_insights: z.object({
      common_themes: z.array(z.string()),
      viral_patterns: z.array(z.string()),
      recommended_style: z.string(),
      target_duration: z.number(),
      key_phrases: z.array(z.string()),
    }).describe("–ò–Ω—Å–∞–π—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
    style_preference: z.enum(["–¥–∏–Ω–∞–º–∏—á–Ω—ã–π", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π", "—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π", "–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π"]).default("–¥–∏–Ω–∞–º–∏—á–Ω—ã–π").describe("–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∏–ª—å —Å—Ü–µ–Ω–∞—Ä–∏—è"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    script: z.object({
      title: z.string(),
      hook: z.string(),
      main_content: z.string(),
      call_to_action: z.string(),
      full_script: z.string(),
      estimated_duration: z.number(),
      visual_directions: z.array(z.string()),
      emotion_markers: z.array(z.string()),
    }).optional(),
    inspiration_sources: z.array(z.string()),
    viral_elements_used: z.array(z.string()),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [GenerateScript] Starting execution with params:', context);
    
    try {
      // –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
      const openaiClient = createOpenAI({
        baseURL: process.env.OPENAI_BASE_URL || undefined,
        apiKey: process.env.OPENAI_API_KEY,
      });
      
      logger?.info('üìù [GenerateScript] Analyzing video patterns and generating script with GPT-4...');
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–∏—Ä—É—Å–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const viralVideos = context.analyzed_videos
        .filter(v => v.is_viral)
        .sort((a, b) => b.engagement_score - a.engagement_score);
      
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const allKeywords = context.analyzed_videos.flatMap(v => v.keywords);
      const viralFactors = [...new Set(viralVideos.flatMap(v => v.viral_factors))];
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT-4
      const analysisContext = `
–¢–ï–ú–ê: ${context.topic}

–ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–´–• –í–ò–î–ï–û:
–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${context.analyzed_videos.length} –≤–∏–¥–µ–æ
–í–∏—Ä—É—Å–Ω—ã—Ö: ${viralVideos.length}

–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
${allKeywords.slice(0, 15).join(', ')}

–í–ò–†–£–°–ù–´–ï –§–ê–ö–¢–û–†–´:
${viralFactors.join('\n- ')}

–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –°–¢–ò–õ–¨: ${context.content_insights.recommended_style}
–¶–ï–õ–ï–í–ê–Ø –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨: ${context.content_insights.target_duration} —Å–µ–∫—É–Ω–¥
–ü–†–ï–î–ü–û–ß–ò–¢–ê–ï–ú–´–ô –°–¢–ò–õ–¨: ${context.style_preference}

–û–ë–©–ò–ï –¢–ï–ú–´:
${context.content_insights.common_themes.join(', ')}

–í–ò–†–£–°–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:
${context.content_insights.viral_patterns.join('\n- ')}

TOP 3 –í–ò–†–£–°–ù–´–• –í–ò–î–ï–û:
${viralVideos.slice(0, 3).map((v, i) => `${i+1}. ${v.video_id} (${v.platform}) - ${v.engagement_score}% engagement`).join('\n')}
      `.trim();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ GPT-4
      const { text: generatedScript } = await generateText({
        model: openaiClient("gpt-4o"),
        messages: [
          {
            role: "system",
            content: `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω—ã—Ö –≤–∏–¥–µ–æ.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–¶–ï–ù–ê–†–ò–Æ:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞, –Ω–æ —Å–æ–∑–¥–∞–π—Ç–µ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç
2. –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
3. –í–∫–ª—é—á–∏—Ç–µ —Ü–µ–ø–ª—è—é—â–∏–π —Ö—É–∫ –≤ –ø–µ—Ä–≤—ã–µ 5 —Å–µ–∫—É–Ω–¥
4. –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
5. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
6. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ü–µ–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
7. –î–æ–±–∞–≤—å—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è
8. –î–æ–±–∞–≤—å—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã

–û–¢–í–ï–¢ –í JSON –§–û–†–ú–ê–¢–ï:
{
  "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ",
  "hook": "–¶–µ–ø–ª—è—é—â–∏–π —Ö—É–∫",
  "main_content": "–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
  "call_to_action": "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é", 
  "full_script": "–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π",
  "estimated_duration": —á–∏—Å–ª–æ_—Å–µ–∫—É–Ω–¥,
  "visual_directions": ["–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ 1", "–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ 2"],
  "emotion_markers": ["—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä 1", "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä 2"]
}`
          },
          {
            role: "user",
            content: `–°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—É—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n\n${analysisContext}`
          }
        ],
        temperature: 0.8,
        maxTokens: 1000,
      });
      
      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç GPT-4
      let scriptData;
      try {
        scriptData = JSON.parse(generatedScript);
      } catch (parseError) {
        logger?.warn('‚ö†Ô∏è [GenerateScript] Failed to parse GPT-4 response, using enhanced fallback');
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const topKeywords = allKeywords.slice(0, 5);
        const fallbackHook = `–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Ç–∞–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å ${context.topic}! –¢–æ, —á—Ç–æ –≤—ã —Å–µ–π—á–∞—Å —É–∑–Ω–∞–µ—Ç–µ, –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à –≤–∑–≥–ª—è–¥ –Ω–∞–≤—Å–µ–≥–¥–∞.`;
        const fallbackMainContent = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ ${context.analyzed_videos.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ, —è –æ–±–Ω–∞—Ä—É–∂–∏–ª –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å. –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, ${context.content_insights.common_themes[0] || '–∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä'} –∏–≥—Ä–∞–µ—Ç —Ä–µ—à–∞—é—â—É—é —Ä–æ–ª—å. –í–æ—Ç —Ç—Ä–∏ –≥–ª–∞–≤–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–∞: –ø–µ—Ä–≤—ã–π - ${topKeywords[0] || '–æ—Å–Ω–æ–≤–∞'}, –≤—Ç–æ—Ä–æ–π - ${topKeywords[1] || '–ø—Ä–∞–∫—Ç–∏–∫–∞'}, —Ç—Ä–µ—Ç–∏–π - ${topKeywords[2] || '—Ä–µ–∑—É–ª—å—Ç–∞—Ç'}.`;
        const fallbackCTA = `–ï—Å–ª–∏ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–∞ - —Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫! –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–∞–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ - –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å! –ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, –∫–∞–∫–æ–π –∏–Ω—Å–∞–π—Ç –ø–æ–∫–∞–∑–∞–ª—Å—è –≤–∞–º —Å–∞–º—ã–º —Ü–µ–Ω–Ω—ã–º!`;
        
        scriptData = {
          title: `${context.topic}: ${topKeywords[0] ? `–°–µ–∫—Ä–µ—Ç ${topKeywords[0]}` : '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ'}`,
          hook: fallbackHook,
          main_content: fallbackMainContent,
          call_to_action: fallbackCTA,
          full_script: `${fallbackHook}\n\n${fallbackMainContent}\n\n${fallbackCTA}`,
          estimated_duration: context.content_insights.target_duration,
          visual_directions: ["–î–∏–Ω–∞–º–∏—á–Ω–∞—è —Å–º–µ–Ω–∞ –∫–∞–¥—Ä–æ–≤", "–¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤—Å—Ç–∞–≤–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã"],
          emotion_markers: ["–ò–Ω—Ç—Ä–∏–≥–∞ –≤ –Ω–∞—á–∞–ª–µ", "–ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç –∏–Ω—Å–∞–π—Ç–æ–≤"]
        };
      }
      
      // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
      const inspirationSources = viralVideos
        .slice(0, 3)
        .map(v => `${v.platform}: ${v.video_id} (${v.engagement_score}% engagement)`);
      
      const script = {
        title: scriptData.title,
        hook: scriptData.hook,
        main_content: scriptData.main_content,
        call_to_action: scriptData.call_to_action,
        full_script: scriptData.full_script,
        estimated_duration: scriptData.estimated_duration,
        visual_directions: scriptData.visual_directions,
        emotion_markers: scriptData.emotion_markers,
      };
      
      logger?.info('‚úÖ [GenerateScript] Script generated successfully');
      return {
        success: true,
        script,
        inspiration_sources: inspirationSources,
        viral_elements_used: viralFactors.slice(0, 3),
        message: `–°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ${context.analyzed_videos.length} –≤–∏–¥–µ–æ`
      };
      
    } catch (error) {
      logger?.error('‚ùå [GenerateScript] OpenAI API error, using enhanced fallback:', error);
      
      // –ö–†–ò–¢–ò–ß–ù–´–ô FALLBACK: —Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
      try {
        // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
        const fallbackKeywords = ["–ø–æ–ø—É–ª—è—Ä–Ω–æ", "—Ç—Ä–µ–Ω–¥", "–ª–∞–π—Ñ—Ö–∞–∫", "—Å–µ–∫—Ä–µ—Ç"];
        const fallbackHook = `–£–∑–Ω–∞–π—Ç–µ –≥–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –ø—Ä–æ ${context.topic}, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —ç—Ç–æ–π —Ç–µ–º–µ!`;
        const fallbackMainContent = `–í —ç—Ç–æ–º –≤–∏–¥–µ–æ —è –ø–æ–∫–∞–∂—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å ${context.topic}. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —è –Ω–∞—à–µ–ª —Ç—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`;
        const fallbackCTA = `–°—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫, –µ—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∏ –ø–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö - —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥–∞–ª—å—à–µ!`;
        
        const emergencyScript = {
          title: `${context.topic}: –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±`,
          hook: fallbackHook,
          main_content: fallbackMainContent,
          call_to_action: fallbackCTA,
          full_script: `${fallbackHook}\n\n${fallbackMainContent}\n\n${fallbackCTA}`,
          estimated_duration: 30,
          visual_directions: ["–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è –ø–æ–¥–∞—á–∞", "–ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"],
          emotion_markers: ["–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"]
        };
        
        logger?.info('‚úÖ [GenerateScript] Emergency fallback script created successfully');
        return {
          success: true, // –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º success –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è workflow
          script: emergencyScript,
          inspiration_sources: [`Fallback script due to API error`],
          viral_elements_used: fallbackKeywords,
          message: `–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI –∞–Ω–∞–ª–∏–∑–∞`
        };
        
      } catch (fallbackError) {
        logger?.error('‚ùå [GenerateScript] Even fallback failed:', fallbackError);
        return {
          success: false,
          inspiration_sources: [],
          viral_elements_used: [],
          message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
      }
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
export const improveScriptTool = createTool({
  id: "improve-script-tool", 
  description: "–£–ª—É—á—à–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π",
  inputSchema: z.object({
    current_script: z.string().describe("–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è"),
    improvement_notes: z.string().describe("–ó–∞–º–µ—á–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"),
    topic: z.string().describe("–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"),
    target_duration: z.number().default(30).describe("–¶–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"),
    style_adjustments: z.array(z.string()).default([]).describe("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    improved_script: z.object({
      title: z.string(),
      hook: z.string(),
      main_content: z.string(),
      call_to_action: z.string(),
      full_script: z.string(),
      estimated_duration: z.number(),
      changes_made: z.array(z.string()),
    }).optional(),
    improvement_summary: z.string(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [ImproveScript] Starting execution with params:', context);
    
    try {
      logger?.info('üìù [ImproveScript] Analyzing improvement requests and updating script...');
      
      // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
      const scriptParts = context.current_script.split('\n\n');
      let hook = scriptParts[0] || '';
      let mainContent = scriptParts[1] || '';
      let cta = scriptParts[2] || '';
      
      const changesMade: string[] = [];
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
      const notes = context.improvement_notes.toLowerCase();
      
      // –£–ª—É—á—à–µ–Ω–∏—è —Ö—É–∫–∞
      if (notes.includes('–∫—Ä—é—á–æ–∫') || notes.includes('–Ω–∞—á–∞–ª–æ') || notes.includes('—Ö—É–∫')) {
        const newHooks = [
          `–í–ù–ò–ú–ê–ù–ò–ï! –¢–æ, —á—Ç–æ —è —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ ${context.topic}, –ø–µ—Ä–µ–≤–µ—Ä–Ω–µ—Ç –≤–∞—à –º–∏—Ä!`,
          `–≠—Ç–æ—Ç ${context.topic} —Å–µ–∫—Ä–µ—Ç –∑–Ω–∞—é—Ç —Ç–æ–ª—å–∫–æ 1% –ª—é–¥–µ–π!`,
          `–°–¢–û–ü –°–ö–†–û–õ–õ! –í—ã –î–û–õ–ñ–ù–´ —É–≤–∏–¥–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å ${context.topic}!`,
        ];
        hook = newHooks[Math.floor(Math.random() * newHooks.length)];
        changesMade.push("–û–±–Ω–æ–≤–ª–µ–Ω –∫—Ä—é—á–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è");
      }
      
      if (notes.includes('–∫–æ—Ä–æ—á–µ') || notes.includes('—Å–æ–∫—Ä–∞—Ç–∏—Ç—å')) {
        mainContent = mainContent.substring(0, Math.floor(mainContent.length * 0.7)) + "...";
        changesMade.push("–°–æ–∫—Ä–∞—â–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ");
      }
      
      if (notes.includes('–¥–ª–∏–Ω–Ω–µ–µ') || notes.includes('–ø–æ–¥—Ä–æ–±–Ω–µ–µ')) {
        mainContent += ` –ê –µ—â–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ ${context.topic} –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω—é–∞–Ω—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –¥–µ—Ç–∞–ª—å–Ω–æ...`;
        changesMade.push("–†–∞—Å—à–∏—Ä–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ");
      }
      
      if (notes.includes('—ç–º–æ—Ü–∏–∏') || notes.includes('—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–µ–µ')) {
        hook = hook.replace(/!/g, '!!!').toUpperCase();
        mainContent = `üî• ${mainContent} üî•`;
        changesMade.push("–î–æ–±–∞–≤–ª–µ–Ω–æ –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏");
      }
      
      if (notes.includes('–ø—Ä–∏–∑—ã–≤') || notes.includes('–¥–µ–π—Å—Ç–≤–∏–µ') || notes.includes('cta')) {
        const newCTAs = [
          "–°–†–û–ß–ù–û —Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å! –¢–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ!",
          "–õ–∞–π–∫ –µ—Å–ª–∏ –ø–æ–º–æ–≥–ª–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–∞–∫–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –≤–∞—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º!",
          "–ù–µ –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–π—Ç–µ! –õ–∞–π–∫ –∑–∞ —Ü–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
        ];
        cta = newCTAs[Math.floor(Math.random() * newCTAs.length)];
        changesMade.push("–£—Å–∏–ª–µ–Ω –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é");
      }
      
      if (notes.includes('–∑–∞–≥–æ–ª–æ–≤–æ–∫') || notes.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ')) {
        const newTitles = [
          `${context.topic}: –®–û–ö–ò–†–£–Æ–©–ê–Ø –ø—Ä–∞–≤–¥–∞!`,
          `–ù–ò–ö–¢–û –Ω–µ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –≤–∞–º –ø—Ä–æ ${context.topic} –≠–¢–û!`,
          `${context.topic} - —Å–µ–∫—Ä–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–∫—Ä—ã–≤–∞—é—Ç!`,
        ];
        changesMade.push("–û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
      context.style_adjustments.forEach(adjustment => {
        if (adjustment.includes('–¥–∏–Ω–∞–º–∏—á–Ω–µ–µ')) {
          mainContent = mainContent.replace(/\./g, '! ').replace(/,/g, ' -');
          changesMade.push("–°–¥–µ–ª–∞–Ω–æ –±–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ");
        }
        if (adjustment.includes('–ø—Ä–æ—â–µ')) {
          mainContent = mainContent.replace(/[–∞-—è—ë]{15,}/gi, '–ø–æ–Ω—è—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±');
          changesMade.push("–£–ø—Ä–æ—â–µ–Ω–∞ –ª–µ–∫—Å–∏–∫–∞");
        }
      });
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ, –¥–µ–ª–∞–µ–º –æ–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
      if (changesMade.length === 0) {
        hook = `üö® ${hook}`;
        mainContent = `${mainContent} –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ 99% —Å–ª—É—á–∞–µ–≤!`;
        cta = `${cta} –î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
        changesMade.push("–û–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏");
      }
      
      const improvedScript = {
        title: `${context.topic}: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è!`,
        hook,
        main_content: mainContent,
        call_to_action: cta,
        full_script: `${hook}\n\n${mainContent}\n\n${cta}`,
        estimated_duration: context.target_duration,
        changes_made: changesMade,
      };
      
      const improvementSummary = `–í–Ω–µ—Å–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${changesMade.join(', ')}`;
      
      logger?.info('‚úÖ [ImproveScript] Script improved successfully');
      return {
        success: true,
        improved_script: improvedScript,
        improvement_summary: improvementSummary,
        message: `–°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω. –í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${changesMade.length}`
      };
      
    } catch (error) {
      logger?.error('‚ùå [ImproveScript] Script improvement error:', error);
      return {
        success: false,
        improvement_summary: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è",
        message: `–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
export const validateScriptTool = createTool({
  id: "validate-script-tool",
  description: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
  inputSchema: z.object({
    script: z.string().describe("–¢–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
    target_duration: z.number().default(30).describe("–¶–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"),
    platform: z.enum(["youtube", "tiktok", "instagram", "all"]).default("all").describe("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    validation_score: z.number(),
    optimization_suggestions: z.array(z.object({
      category: z.string(),
      suggestion: z.string(),
      priority: z.enum(["high", "medium", "low"]),
    })),
    readability_metrics: z.object({
      word_count: z.number(),
      sentence_count: z.number(),
      avg_sentence_length: z.number(),
      complexity_score: z.number(),
    }),
    viral_potential: z.object({
      hook_strength: z.number(),
      emotional_impact: z.number(),
      call_to_action_power: z.number(),
      overall_rating: z.number(),
    }),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [ValidateScript] Starting execution with params:', context);
    
    try {
      logger?.info('üìù [ValidateScript] Validating script quality and viral potential...');
      
      const script = context.script;
      const words = script.split(/\s+/).filter(word => word.length > 0);
      const sentences = script.split(/[.!?]+/).filter(s => s.trim().length > 0);
      
      // –ú–µ—Ç—Ä–∏–∫–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
      const readabilityMetrics = {
        word_count: words.length,
        sentence_count: sentences.length,
        avg_sentence_length: words.length / Math.max(sentences.length, 1),
        complexity_score: words.filter(w => w.length > 6).length / words.length,
      };
      
      // –ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
      const viralKeywords = [
        '—Å–µ–∫—Ä–µ—Ç', '—à–æ–∫', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ', '–ª–∞–π—Ñ—Ö–∞–∫', '—Ç—Ä–µ–Ω–¥',
        '–≤–Ω–∏–º–∞–Ω–∏–µ', '—Å—Ç–æ–ø', '–Ω–µ–ª—å–∑—è', '–¥–æ–ª–∂–Ω—ã', '–∏–∑–º–µ–Ω–∏—Ç', '—Ä–µ–≤–æ–ª—é—Ü–∏—è'
      ];
      
      const emotionalWords = [
        '–ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π', '—à–æ–∫–∏—Ä—É—é—â–∏–π', '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π', 
        '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π', '–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–π', '–∏–∑—É–º–∏—Ç–µ–ª—å–Ω—ã–π'
      ];
      
      const ctaWords = [
        '–ª–∞–π–∫', '–ø–æ–¥–ø–∏—Å—ã–≤', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä', '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è', '—Å–æ—Ö—Ä–∞–Ω–∏',
        '–¥–µ–π—Å—Ç–≤—É–π', '–ø–æ–ø—Ä–æ–±—É–π', '–∏—Å–ø—ã—Ç–∞–π'
      ];
      
      // –û—Ü–µ–Ω–∫–∞ –∫—Ä—é—á–∫–∞ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
      const hookText = script.substring(0, 50).toLowerCase();
      const hookViralWords = viralKeywords.filter(word => hookText.includes(word)).length;
      const hookStrength = Math.min(100, (hookViralWords * 25) + (hookText.includes('!') ? 25 : 0));
      
      // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
      const emotionalWordsCount = emotionalWords.filter(word => 
        script.toLowerCase().includes(word)
      ).length;
      const emotionalImpact = Math.min(100, emotionalWordsCount * 20);
      
      // –°–∏–ª–∞ –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é
      const ctaWordsCount = ctaWords.filter(word => 
        script.toLowerCase().includes(word)
      ).length;
      const ctaPower = Math.min(100, ctaWordsCount * 15);
      
      const viralPotential = {
        hook_strength: hookStrength,
        emotional_impact: emotionalImpact,
        call_to_action_power: ctaPower,
        overall_rating: (hookStrength + emotionalImpact + ctaPower) / 3,
      };
      
      // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      const suggestions = [];
      
      if (readabilityMetrics.word_count > 100) {
        suggestions.push({
          category: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
          suggestion: "–°—Ü–µ–Ω–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ 80-90 —Å–ª–æ–≤.",
          priority: "high" as const,
        });
      }
      
      if (readabilityMetrics.avg_sentence_length > 15) {
        suggestions.push({
          category: "–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å", 
          suggestion: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.",
          priority: "medium" as const,
        });
      }
      
      if (hookStrength < 50) {
        suggestions.push({
          category: "–ö—Ä—é—á–æ–∫",
          suggestion: "–ù–∞—á–∞–ª–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–µ–ø–ª—è—é—â–µ–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Ç—Ä–∏–≥–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞.",
          priority: "high" as const,
        });
      }
      
      if (emotionalImpact < 30) {
        suggestions.push({
          category: "–≠–º–æ—Ü–∏–∏",
          suggestion: "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—é.",
          priority: "medium" as const,
        });
      }
      
      if (ctaPower < 40) {
        suggestions.push({
          category: "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
          suggestion: "–£—Å–∏–ª—å—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –ª–∞–π–∫, –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
          priority: "high" as const,
        });
      }
      
      if (context.platform === "tiktok" && !script.includes("#")) {
        suggestions.push({
          category: "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞",
          suggestion: "–î–ª—è TikTok —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞.",
          priority: "medium" as const,
        });
      }
      
      // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
      const validationScore = (
        (readabilityMetrics.word_count <= 90 ? 25 : 10) +
        (readabilityMetrics.avg_sentence_length <= 12 ? 25 : 10) +
        (viralPotential.overall_rating / 100 * 50)
      );
      
      logger?.info('‚úÖ [ValidateScript] Script validation completed successfully');
      return {
        success: true,
        validation_score: Math.round(validationScore),
        optimization_suggestions: suggestions,
        readability_metrics: readabilityMetrics,
        viral_potential: viralPotential,
        message: `–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ü–µ–Ω–∫–∞: ${Math.round(validationScore)}/100. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${suggestions.length}`
      };
      
    } catch (error) {
      logger?.error('‚ùå [ValidateScript] Script validation error:', error);
      return {
        success: false,
        validation_score: 0,
        optimization_suggestions: [],
        readability_metrics: {
          word_count: 0,
          sentence_count: 0,
          avg_sentence_length: 0,
          complexity_score: 0,
        },
        viral_potential: {
          hook_strength: 0,
          emotional_impact: 0,
          call_to_action_power: 0,
          overall_rating: 0,
        },
        message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});