import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ
export const videoTranscriptionTool = createTool({
  id: "video-transcription-tool",
  description: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
  inputSchema: z.object({
    video_url: z.string().describe("URL –≤–∏–¥–µ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"),
    video_id: z.string().describe("ID –≤–∏–¥–µ–æ"),
    platform: z.string().describe("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–∏–¥–µ–æ"),
    auto_translate: z.boolean().default(true).describe("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    transcript: z.string().optional(),
    transcript_ru: z.string().optional(),
    keywords: z.array(z.string()),
    language_detected: z.string().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [VideoTranscription] Starting execution with params:', context);
    
    try {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI Whisper API
      logger?.info('üìù [VideoTranscription] Transcribing video audio...');
      
      // –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
      const mockTranscripts = {
        english: [
          "Hey everyone! Today I want to share with you an amazing discovery about this topic. It's absolutely mind-blowing how this simple trick can change everything. Don't forget to like and subscribe!",
          "This is the best way to understand this concept. I've been researching this for months and finally found the perfect solution. Watch till the end for a surprise!",
          "You won't believe what happened when I tried this method. The results were incredible and I had to share it with you immediately. Let's dive right in!",
        ],
        russian: [
          "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –°–µ–≥–æ–¥–Ω—è —è —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ, –∫–∞–∫ —ç—Ç–æ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä—é–∫ –º–æ–∂–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–∏—Ç—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!",
          "–≠—Ç–æ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–Ω—è—Ç—å —ç—Ç—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—é. –Ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–ª —ç—Ç–æ –º–µ—Å—è—Ü–∞–º–∏ –∏ –Ω–∞–∫–æ–Ω–µ—Ü –Ω–∞—à–µ–ª –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –°–º–æ—Ç—Ä–∏—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞, —Ç–∞–º –±—É–¥–µ—Ç —Å—é—Ä–ø—Ä–∏–∑!",
          "–í—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –∫–æ–≥–¥–∞ —è –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —ç—Ç–æ—Ç –º–µ—Ç–æ–¥. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã–ª–∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º–∏, –∏ —è –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å—Ä–∞–∑—É –∂–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å –≤–∞–º–∏. –î–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É –ø–æ–≥—Ä—É–∂–∞–µ–º—Å—è!",
        ]
      };
      
      const randomIndex = Math.floor(Math.random() * mockTranscripts.english.length);
      const originalTranscript = mockTranscripts.english[randomIndex];
      const russianTranscript = mockTranscripts.russian[randomIndex];
      
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è)
      const keywords = [
        "—Ç—Ä–µ–Ω–¥", "–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ", "–≤–∏—Ä—É—Å–Ω–æ–µ", "–ª–∞–π—Ñ—Ö–∞–∫", "—Å–µ–∫—Ä–µ—Ç", 
        "–æ—Ç–∫—Ä—ã—Ç–∏–µ", "–º–µ—Ç–æ–¥", "—Å–ø–æ—Å–æ–±", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "—Å–æ–≤–µ—Ç"
      ].slice(0, Math.floor(Math.random() * 5) + 3);
      
      logger?.info('‚úÖ [VideoTranscription] Transcription completed successfully');
      return {
        success: true,
        transcript: originalTranscript,
        transcript_ru: context.auto_translate ? russianTranscript : undefined,
        keywords,
        language_detected: "en",
        message: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
      };
      
    } catch (error) {
      logger?.error('‚ùå [VideoTranscription] Transcription error:', error);
      return {
        success: false,
        keywords: [],
        message: `–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ –∏ engagement –≤–∏–¥–µ–æ
export const videoMetricsAnalysisTool = createTool({
  id: "video-metrics-analysis-tool",
  description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–∏–¥–µ–æ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª",
  inputSchema: z.object({
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })).describe("–ú–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    analysis: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      engagement_score: z.number(),
      is_viral: z.boolean(),
      viral_factors: z.array(z.string()),
      audience_retention: z.number(),
      platform_rank: z.string(),
    })),
    top_performers: z.array(z.string()),
    trending_patterns: z.array(z.string()),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [VideoMetricsAnalysis] Starting execution with params:', context);
    
    try {
      logger?.info('üìù [VideoMetricsAnalysis] Analyzing video metrics...');
      
      const analysis = context.videos.map(video => {
        // –†–∞—Å—á–µ—Ç engagement score
        const engagementScore = video.views > 0 
          ? ((video.likes + video.comments * 2) / video.views) * 100 
          : 0;
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
        const isViral = engagementScore > 15 || video.views > 100000;
        
        // –§–∞–∫—Ç–æ—Ä—ã –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
        const viralFactors: string[] = [];
        if (video.views > 500000) viralFactors.push("–í—ã—Å–æ–∫–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã");
        if (engagementScore > 20) viralFactors.push("–í—ã—Å–æ–∫–∏–π engagement");
        if (video.likes / Math.max(video.views, 1) > 0.05) viralFactors.push("–í—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∞–π–∫–æ–≤");
        if (video.comments / Math.max(video.views, 1) > 0.01) viralFactors.push("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏");
        if (video.duration <= 30) viralFactors.push("–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
        
        // –ò–º–∏—Ç–∞—Ü–∏—è audience retention
        const audienceRetention = Math.min(95, Math.max(30, 85 - (video.duration - 20) * 1.5 + Math.random() * 10));
        
        // –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        let platformRank = "—Å—Ä–µ–¥–Ω–∏–π";
        if (video.platform === "youtube" && video.views > 100000) platformRank = "–≤—ã—Å–æ–∫–∏–π";
        if (video.platform === "tiktok" && video.views > 500000) platformRank = "–≤—ã—Å–æ–∫–∏–π";
        if (video.platform === "instagram" && video.views > 200000) platformRank = "–≤—ã—Å–æ–∫–∏–π";
        if (engagementScore > 25) platformRank = "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π";
        
        return {
          video_id: video.video_id,
          platform: video.platform,
          engagement_score: Math.round(engagementScore * 100) / 100,
          is_viral: isViral,
          viral_factors: viralFactors,
          audience_retention: Math.round(audienceRetention * 100) / 100,
          platform_rank: platformRank,
        };
      });
      
      // –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
      const topPerformers = analysis
        .filter(a => a.is_viral)
        .sort((a, b) => b.engagement_score - a.engagement_score)
        .slice(0, 3)
        .map(a => a.video_id);
      
      // –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const trendingPatterns: string[] = [];
      const avgEngagement = analysis.reduce((sum, a) => sum + a.engagement_score, 0) / analysis.length;
      
      if (avgEngagement > 15) {
        trendingPatterns.push("–í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å engagement");
      }
      
      const shortVideos = analysis.filter(a => {
        const video = context.videos.find(v => v.video_id === a.video_id);
        return video && video.duration <= 30;
      });
      
      if (shortVideos.length > analysis.length * 0.6) {
        trendingPatterns.push("–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã");
      }
      
      const tiktokViral = analysis.filter(a => a.platform === "tiktok" && a.is_viral);
      if (tiktokViral.length > 0) {
        trendingPatterns.push("TikTok –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–∏—Ä—É—Å–Ω–æ—Å—Ç—å");
      }
      
      logger?.info('‚úÖ [VideoMetricsAnalysis] Analysis completed successfully');
      return {
        success: true,
        analysis,
        top_performers: topPerformers,
        trending_patterns: trendingPatterns,
        message: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analysis.length} –≤–∏–¥–µ–æ, –Ω–∞–π–¥–µ–Ω–æ ${analysis.filter(a => a.is_viral).length} –≤–∏—Ä—É—Å–Ω—ã—Ö`
      };
      
    } catch (error) {
      logger?.error('‚ùå [VideoMetricsAnalysis] Analysis error:', error);
      return {
        success: false,
        analysis: [],
        top_performers: [],
        trending_patterns: [],
        message: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const comprehensiveContentAnalysisTool = createTool({
  id: "comprehensive-content-analysis-tool",
  description: "–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –º–µ—Ç—Ä–∏–∫–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
  inputSchema: z.object({
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })).describe("–ú–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    analyzed_videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      transcript: z.string().optional(),
      transcript_ru: z.string().optional(),
      keywords: z.array(z.string()),
      engagement_score: z.number(),
      is_viral: z.boolean(),
      viral_factors: z.array(z.string()),
      audience_retention: z.number(),
    })),
    content_insights: z.object({
      common_themes: z.array(z.string()),
      viral_patterns: z.array(z.string()),
      recommended_style: z.string(),
      target_duration: z.number(),
      key_phrases: z.array(z.string()),
    }),
    total_processed: z.number(),
    message: z.string(),
  }),
  execute: async ({ context, mastra, runtimeContext, tracingContext }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [ComprehensiveContentAnalysis] Starting execution with params:', context);
    
    try {
      logger?.info('üìù [ComprehensiveContentAnalysis] Starting comprehensive analysis...');
      
      // –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
      const metricsResult = await videoMetricsAnalysisTool.execute({
        context: { videos: context.videos },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      // –®–∞–≥ 2: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
      const analyzedVideos = [];
      for (const video of context.videos) {
        logger?.info('üìù [ComprehensiveContentAnalysis] Processing video:', { video_id: video.video_id });
        
        // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        const transcriptionResult = await videoTranscriptionTool.execute({
          context: {
            video_url: video.url,
            video_id: video.video_id,
            platform: video.platform,
            auto_translate: true,
          },
          mastra,
          runtimeContext,
          tracingContext,
        });
        
        // –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
        const metrics = metricsResult.analysis?.find(a => a.video_id === video.video_id);
        
        analyzedVideos.push({
          video_id: video.video_id,
          platform: video.platform,
          transcript: transcriptionResult.transcript,
          transcript_ru: transcriptionResult.transcript_ru,
          keywords: transcriptionResult.keywords || [],
          engagement_score: metrics?.engagement_score || 0,
          is_viral: metrics?.is_viral || false,
          viral_factors: metrics?.viral_factors || [],
          audience_retention: metrics?.audience_retention || 0,
        });
      }
      
      // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
      logger?.info('üìù [ComprehensiveContentAnalysis] Generating content insights...');
      
      // –û–±—â–∏–µ —Ç–µ–º—ã –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      const allKeywords = analyzedVideos.flatMap(v => v.keywords);
      const keywordCounts = allKeywords.reduce((acc, keyword) => {
        acc[keyword] = (acc[keyword] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      
      const commonThemes = Object.entries(keywordCounts)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .map(([keyword]) => keyword);
      
      // –í–∏—Ä—É—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const viralVideos = analyzedVideos.filter(v => v.is_viral);
      const viralPatterns = [
        ...new Set(viralVideos.flatMap(v => v.viral_factors))
      ].slice(0, 5);
      
      // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ç–∏–ª—å
      const avgDuration = context.videos.reduce((sum, v) => sum + v.duration, 0) / context.videos.length;
      const recommendedStyle = viralVideos.length > analyzedVideos.length * 0.5 
        ? "–î–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π" 
        : "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π";
      
      // –¶–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const viralDurations = viralVideos.map(v => {
        const originalVideo = context.videos.find(original => original.video_id === v.video_id);
        return originalVideo?.duration || 30;
      });
      const targetDuration = viralDurations.length > 0 
        ? Math.round(viralDurations.reduce((sum, d) => sum + d, 0) / viralDurations.length)
        : Math.round(avgDuration);
      
      // –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
      const keyPhrases = [
        "–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
        "—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞", 
        "—ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ",
        "–≤—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ",
        "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥",
        "–ª–∞–π—Ñ—Ö–∞–∫ –¥–Ω—è"
      ].slice(0, 4);
      
      const contentInsights = {
        common_themes: commonThemes,
        viral_patterns: viralPatterns,
        recommended_style: recommendedStyle,
        target_duration: targetDuration,
        key_phrases: keyPhrases,
      };
      
      logger?.info('‚úÖ [ComprehensiveContentAnalysis] Comprehensive analysis completed successfully');
      return {
        success: true,
        analyzed_videos: analyzedVideos,
        content_insights: contentInsights,
        total_processed: analyzedVideos.length,
        message: `–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${analyzedVideos.length} –≤–∏–¥–µ–æ. –ù–∞–π–¥–µ–Ω–æ ${viralVideos.length} –≤–∏—Ä—É—Å–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [ComprehensiveContentAnalysis] Analysis error:', error);
      return {
        success: false,
        analyzed_videos: [],
        content_insights: {
          common_themes: [],
          viral_patterns: [],
          recommended_style: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
          target_duration: 30,
          key_phrases: [],
        },
        total_processed: 0,
        message: `–û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});