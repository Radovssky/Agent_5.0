import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";
import { generateText } from "ai"; 
import { createOpenAI } from "@ai-sdk/openai";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ
export const videoTranscriptionTool = createTool({
  id: "video-transcription-tool",
  description: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
  inputSchema: z.object({
    video_url: z.string().describe("URL –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"),
    video_id: z.string().describe("ID –≤–∏–¥–µ–æ"),
    platform: z.string().describe("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–∏–¥–µ–æ"),
    title: z.string().describe("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ"),
    description: z.string().optional().describe("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ"),
    auto_translate: z.boolean().default(true).describe("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    transcript: z.string().optional(),
    transcript_ru: z.string().optional(),
    keywords: z.array(z.string()),
    language_detected: z.string().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [VideoTranscription] Starting execution with params:', context);
    
    try {
      // –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
      const openaiClient = createOpenAI({
        baseURL: process.env.OPENAI_BASE_URL || undefined,
        apiKey: process.env.OPENAI_API_KEY,
      });
      
      logger?.info('üìù [VideoTranscription] Analyzing video content with GPT-4...');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const contentToAnalyze = `
–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ: "${context.title}"
${context.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: "${context.description}"` : ''}
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${context.platform}
URL: ${context.video_url}
      `.trim();
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ GPT-4
      const { text: analysisResult } = await generateText({
        model: openaiClient("gpt-4o"),
        messages: [
          {
            role: "system",
            content: `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å:

1. –í–ï–†–û–Ø–¢–ù–´–ô –¢–†–ê–ù–°–ö–†–ò–ü–¢ (50-100 —Å–ª–æ–≤) - –∫–∞–∫ –º–æ–≥ –±—ã –∑–≤—É—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
2. –†–£–°–°–ö–ò–ô –ü–ï–†–ï–í–û–î –¢–†–ê–ù–°–ö–†–ò–ü–¢–ê - –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
3. –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê (5-8 —Å–ª–æ–≤) - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –ø–æ–Ω—è—Ç–∏—è
4. –û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô –Ø–ó–´–ö - —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–û—Ç–≤–µ—á–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "transcript": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç...",
  "transcript_ru": "—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥...",
  "keywords": ["—Å–ª–æ–≤–æ1", "—Å–ª–æ–≤–æ2", "—Å–ª–æ–≤–æ3"],
  "language_detected": "en"
}`
          },
          {
            role: "user", 
            content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –≤–∏–¥–µ–æ:\n\n${contentToAnalyze}`
          }
        ],
        temperature: 0.7,
        maxTokens: 500,
      });
      
      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      let parsedResult;
      try {
        parsedResult = JSON.parse(analysisResult);
      } catch (parseError) {
        logger?.warn('‚ö†Ô∏è [VideoTranscription] Failed to parse GPT-4 response, using fallback');
        // Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        parsedResult = {
          transcript: `This video about "${context.title}" provides valuable insights and practical tips for viewers interested in this topic.`,
          transcript_ru: `–≠—Ç–æ –≤–∏–¥–µ–æ –ø—Ä–æ "${context.title}" –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π.`,
          keywords: ["–ø–æ–ª–µ–∑–Ω–æ", "—Å–æ–≤–µ—Ç", "—Ç–µ–º–∞", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
          language_detected: "en"
        };
      }
      
      logger?.info('‚úÖ [VideoTranscription] Content analysis completed successfully');
      return {
        success: true,
        transcript: parsedResult.transcript,
        transcript_ru: context.auto_translate ? parsedResult.transcript_ru : undefined,
        keywords: parsedResult.keywords || [],
        language_detected: parsedResult.language_detected || "en",
        message: "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–º–æ—â—å—é GPT-4"
      };
      
    } catch (error) {
      logger?.error('‚ùå [VideoTranscription] Analysis error:', error);
      
      // Fallback –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—à–∏–±–∫–µ
      return {
        success: true, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º success –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        transcript: `This video titled "${context.title}" discusses the main topic with useful information for viewers.`,
        transcript_ru: context.auto_translate ? `–≠—Ç–æ –≤–∏–¥–µ–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "${context.title}" –æ–±—Å—É–∂–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π.` : undefined,
        keywords: ["–ø–æ–ª–µ–∑–Ω–æ", "–≤–∏–¥–µ–æ", "—Ç–µ–º–∞", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
        language_detected: "en",
        message: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ –∏ engagement –≤–∏–¥–µ–æ
export const videoMetricsAnalysisTool = createTool({
  id: "video-metrics-analysis-tool",
  description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–∏–¥–µ–æ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª",
  inputSchema: z.object({
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })).describe("–ú–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    analysis: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      engagement_score: z.number(),
      is_viral: z.boolean(),
      viral_factors: z.array(z.string()),
      audience_retention: z.number(),
      platform_rank: z.string(),
    })),
    top_performers: z.array(z.string()),
    trending_patterns: z.array(z.string()),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [VideoMetricsAnalysis] Starting execution with params:', context);
    
    try {
      logger?.info('üìù [VideoMetricsAnalysis] Analyzing video metrics...');
      
      const analysis = context.videos.map(video => {
        // –†–∞—Å—á–µ—Ç engagement score
        const engagementScore = video.views > 0 
          ? ((video.likes + video.comments * 2) / video.views) * 100 
          : 0;
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
        const isViral = engagementScore > 15 || video.views > 100000;
        
        // –§–∞–∫—Ç–æ—Ä—ã –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
        const viralFactors: string[] = [];
        if (video.views > 500000) viralFactors.push("–í—ã—Å–æ–∫–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã");
        if (engagementScore > 20) viralFactors.push("–í—ã—Å–æ–∫–∏–π engagement");
        if (video.likes / Math.max(video.views, 1) > 0.05) viralFactors.push("–í—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∞–π–∫–æ–≤");
        if (video.comments / Math.max(video.views, 1) > 0.01) viralFactors.push("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏");
        if (video.duration <= 30) viralFactors.push("–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
        
        // –ò–º–∏—Ç–∞—Ü–∏—è audience retention
        const audienceRetention = Math.min(95, Math.max(30, 85 - (video.duration - 20) * 1.5 + Math.random() * 10));
        
        // –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        let platformRank = "—Å—Ä–µ–¥–Ω–∏–π";
        if (video.platform === "youtube" && video.views > 100000) platformRank = "–≤—ã—Å–æ–∫–∏–π";
        if (video.platform === "tiktok" && video.views > 500000) platformRank = "–≤—ã—Å–æ–∫–∏–π";
        if (video.platform === "instagram" && video.views > 200000) platformRank = "–≤—ã—Å–æ–∫–∏–π";
        if (engagementScore > 25) platformRank = "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π";
        
        return {
          video_id: video.video_id,
          platform: video.platform,
          engagement_score: Math.round(engagementScore * 100) / 100,
          is_viral: isViral,
          viral_factors: viralFactors,
          audience_retention: Math.round(audienceRetention * 100) / 100,
          platform_rank: platformRank,
        };
      });
      
      // –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
      const topPerformers = analysis
        .filter(a => a.is_viral)
        .sort((a, b) => b.engagement_score - a.engagement_score)
        .slice(0, 3)
        .map(a => a.video_id);
      
      // –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const trendingPatterns: string[] = [];
      const avgEngagement = analysis.reduce((sum, a) => sum + a.engagement_score, 0) / analysis.length;
      
      if (avgEngagement > 15) {
        trendingPatterns.push("–í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å engagement");
      }
      
      const shortVideos = analysis.filter(a => {
        const video = context.videos.find(v => v.video_id === a.video_id);
        return video && video.duration <= 30;
      });
      
      if (shortVideos.length > analysis.length * 0.6) {
        trendingPatterns.push("–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã");
      }
      
      const tiktokViral = analysis.filter(a => a.platform === "tiktok" && a.is_viral);
      if (tiktokViral.length > 0) {
        trendingPatterns.push("TikTok –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–∏—Ä—É—Å–Ω–æ—Å—Ç—å");
      }
      
      logger?.info('‚úÖ [VideoMetricsAnalysis] Analysis completed successfully');
      return {
        success: true,
        analysis,
        top_performers: topPerformers,
        trending_patterns: trendingPatterns,
        message: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analysis.length} –≤–∏–¥–µ–æ, –Ω–∞–π–¥–µ–Ω–æ ${analysis.filter(a => a.is_viral).length} –≤–∏—Ä—É—Å–Ω—ã—Ö`
      };
      
    } catch (error) {
      logger?.error('‚ùå [VideoMetricsAnalysis] Analysis error:', error);
      return {
        success: false,
        analysis: [],
        top_performers: [],
        trending_patterns: [],
        message: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const comprehensiveContentAnalysisTool = createTool({
  id: "comprehensive-content-analysis-tool",
  description: "–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –º–µ—Ç—Ä–∏–∫–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
  inputSchema: z.object({
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })).describe("–ú–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    analyzed_videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      transcript: z.string().optional(),
      transcript_ru: z.string().optional(),
      keywords: z.array(z.string()),
      engagement_score: z.number(),
      is_viral: z.boolean(),
      viral_factors: z.array(z.string()),
      audience_retention: z.number(),
    })),
    content_insights: z.object({
      common_themes: z.array(z.string()),
      viral_patterns: z.array(z.string()),
      recommended_style: z.string(),
      target_duration: z.number(),
      key_phrases: z.array(z.string()),
    }),
    total_processed: z.number(),
    message: z.string(),
  }),
  execute: async ({ context, mastra, runtimeContext, tracingContext }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [ComprehensiveContentAnalysis] Starting execution with params:', context);
    
    try {
      logger?.info('üìù [ComprehensiveContentAnalysis] Starting comprehensive analysis...');
      
      // –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
      const metricsResult = await videoMetricsAnalysisTool.execute({
        context: { videos: context.videos },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      // –®–∞–≥ 2: Batch –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø RATE LIMITS)
      let analyzedVideos = [];
      
      try {
        logger?.info('üìù [ComprehensiveContentAnalysis] Analyzing all videos in one batch request...');
        
        // –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è batch –∞–Ω–∞–ª–∏–∑–∞
        const openaiClient = createOpenAI({
          baseURL: process.env.OPENAI_BASE_URL || undefined,
          apiKey: process.env.OPENAI_API_KEY,
        });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const videosData = context.videos.map((video, index) => 
          `–í–ò–î–ï–û ${index + 1}:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: "${video.title || 'Untitled Video'}"
–û–ø–∏—Å–∞–Ω–∏–µ: "${video.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${video.platform}
URL: ${video.url}
ID: ${video.video_id}
---`
        ).join('\n\n');

        // –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ
        const { text: batchAnalysisResult } = await generateText({
          model: openaiClient("gpt-4o"),
          messages: [
            {
              role: "system",
              content: `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ:

1. –í–ï–†–û–Ø–¢–ù–´–ô –¢–†–ê–ù–°–ö–†–ò–ü–¢ (30-60 —Å–ª–æ–≤) - –∫–∞–∫ –º–æ–≥ –±—ã –∑–≤—É—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
2. –†–£–°–°–ö–ò–ô –ü–ï–†–ï–í–û–î –¢–†–ê–ù–°–ö–†–ò–ü–¢–ê  
3. –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê (3-5 —Å–ª–æ–≤) - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã
4. –Ø–ó–´–ö –ö–û–ù–¢–ï–ù–¢–ê

–û—Ç–≤–µ—á–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤ JSON –º–∞—Å—Å–∏–≤–µ:
[
  {
    "video_index": 1,
    "transcript": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç...",
    "transcript_ru": "—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥...", 
    "keywords": ["—Å–ª–æ–≤–æ1", "—Å–ª–æ–≤–æ2", "—Å–ª–æ–≤–æ3"],
    "language_detected": "en"
  },
  ...
]`
            },
            {
              role: "user",
              content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –≤–∏–¥–µ–æ:\n\n${videosData}`
            }
          ],
          temperature: 0.7,
          maxTokens: 2000, // –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è batch –∞–Ω–∞–ª–∏–∑–∞
        });

        // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let batchResults = [];
        try {
          batchResults = JSON.parse(batchAnalysisResult);
        } catch (parseError) {
          logger?.warn('‚ö†Ô∏è [ComprehensiveContentAnalysis] Failed to parse batch analysis, using fallback');
          // Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ OpenAI
          batchResults = context.videos.map((video, index) => ({
            video_index: index + 1,
            transcript: `–ö–æ–Ω—Ç–µ–Ω—Ç –æ: ${video.title}`,
            transcript_ru: `–ö–æ–Ω—Ç–µ–Ω—Ç –æ: ${video.title}`, 
            keywords: video.title.split(' ').slice(0, 3),
            language_detected: "auto"
          }));
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        analyzedVideos = context.videos.map((video, index) => {
          const batchData = batchResults.find(r => r.video_index === index + 1) || {
            transcript: `–ö–æ–Ω—Ç–µ–Ω—Ç: ${video.title}`,
            transcript_ru: `–ö–æ–Ω—Ç–µ–Ω—Ç: ${video.title}`,
            keywords: video.title.split(' ').slice(0, 3),
            language_detected: "auto"
          };
          
          const metrics = metricsResult.analysis?.find(a => a.video_id === video.video_id);
          
          return {
            video_id: video.video_id,
            platform: video.platform,
            transcript: batchData.transcript,
            transcript_ru: batchData.transcript_ru,
            keywords: Array.isArray(batchData.keywords) ? batchData.keywords : [],
            engagement_score: metrics?.engagement_score || 0,
            is_viral: metrics?.is_viral || false,
            viral_factors: metrics?.viral_factors || [],
            audience_retention: metrics?.audience_retention || 0,
          };
        });

        logger?.info('‚úÖ [ComprehensiveContentAnalysis] Batch analysis completed successfully');

      } catch (error) {
        logger?.warn('‚ö†Ô∏è [ComprehensiveContentAnalysis] Batch analysis failed, using fallback results:', error);
        
        // FALLBACK: —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ OpenAI –∞–Ω–∞–ª–∏–∑–∞
        analyzedVideos = context.videos.map(video => {
          const metrics = metricsResult.analysis?.find(a => a.video_id === video.video_id);
          
          return {
            video_id: video.video_id,
            platform: video.platform,
            transcript: `–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${video.title}`,
            transcript_ru: `–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${video.title}`,
            keywords: video.title.split(' ').filter(w => w.length > 2).slice(0, 3),
            engagement_score: metrics?.engagement_score || 0,
            is_viral: metrics?.is_viral || false,
            viral_factors: metrics?.viral_factors || [],
            audience_retention: metrics?.audience_retention || 0,
          };
        });
      }
      
      // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
      logger?.info('üìù [ComprehensiveContentAnalysis] Generating content insights...');
      
      // –û–±—â–∏–µ —Ç–µ–º—ã –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      const allKeywords = analyzedVideos.flatMap(v => v.keywords);
      const keywordCounts = allKeywords.reduce((acc, keyword) => {
        acc[keyword] = (acc[keyword] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      
      const commonThemes = Object.entries(keywordCounts)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .map(([keyword]) => keyword);
      
      // –í–∏—Ä—É—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const viralVideos = analyzedVideos.filter(v => v.is_viral);
      const viralPatterns = [
        ...new Set(viralVideos.flatMap(v => v.viral_factors))
      ].slice(0, 5);
      
      // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ç–∏–ª—å
      const avgDuration = context.videos.reduce((sum, v) => sum + v.duration, 0) / context.videos.length;
      const recommendedStyle = viralVideos.length > analyzedVideos.length * 0.5 
        ? "–î–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π" 
        : "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π";
      
      // –¶–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const viralDurations = viralVideos.map(v => {
        const originalVideo = context.videos.find(original => original.video_id === v.video_id);
        return originalVideo?.duration || 30;
      });
      const targetDuration = viralDurations.length > 0 
        ? Math.round(viralDurations.reduce((sum, d) => sum + d, 0) / viralDurations.length)
        : Math.round(avgDuration);
      
      // –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤
      const keyPhrases = [
        "–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
        "—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞", 
        "—ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ",
        "–≤—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ",
        "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥",
        "–ª–∞–π—Ñ—Ö–∞–∫ –¥–Ω—è"
      ].slice(0, 4);
      
      const contentInsights = {
        common_themes: commonThemes,
        viral_patterns: viralPatterns,
        recommended_style: recommendedStyle,
        target_duration: targetDuration,
        key_phrases: keyPhrases,
      };
      
      logger?.info('‚úÖ [ComprehensiveContentAnalysis] Comprehensive analysis completed successfully');
      return {
        success: true,
        analyzed_videos: analyzedVideos,
        content_insights: contentInsights,
        total_processed: analyzedVideos.length,
        message: `–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${analyzedVideos.length} –≤–∏–¥–µ–æ. –ù–∞–π–¥–µ–Ω–æ ${viralVideos.length} –≤–∏—Ä—É—Å–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤.`
      };
      
    } catch (error) {
      logger?.error('‚ùå [ComprehensiveContentAnalysis] Analysis error:', error);
      return {
        success: false,
        analyzed_videos: [],
        content_insights: {
          common_themes: [],
          viral_patterns: [],
          recommended_style: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
          target_duration: 30,
          key_phrases: [],
        },
        total_processed: 0,
        message: `–û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});