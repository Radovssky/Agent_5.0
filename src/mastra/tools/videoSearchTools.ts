import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≤ YouTube
export const youtubeSearchTool = createTool({
  id: "youtube-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –≤ YouTube Shorts –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    max_results: z.number().default(3).describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [YouTubeSearch] Starting execution with params:', context);
    
    try {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è YouTube API - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YouTube Data API
      logger?.info('üìù [YouTubeSearch] Searching for videos...');
      
      // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
      const mockVideos = [
        {
          video_id: `yt_${Math.random().toString(36).substr(2, 9)}`,
          platform: "youtube",
          title: `${context.topic} - –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤–∏–¥–µ–æ 1`,
          description: `–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ ${context.topic}. –≠—Ç–æ —Ç—Ä–µ–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–±–∏—Ä–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å.`,
          url: `https://youtube.com/shorts/mock_${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://img.youtube.com/vi/mock/hqdefault.jpg`,
          views: Math.floor(Math.random() * 1000000) + 10000,
          likes: Math.floor(Math.random() * 50000) + 1000,
          comments: Math.floor(Math.random() * 5000) + 100,
          duration: Math.floor(Math.random() * 30) + 15, // 15-45 —Å–µ–∫—É–Ω–¥
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
        {
          video_id: `yt_${Math.random().toString(36).substr(2, 9)}`,
          platform: "youtube",
          title: `${context.topic} - –í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç`,
          description: `–ï—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –ø—Ä–æ ${context.topic} —Å –≤—ã—Å–æ–∫–∏–º engagement.`,
          url: `https://youtube.com/shorts/mock_${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://img.youtube.com/vi/mock2/hqdefault.jpg`,
          views: Math.floor(Math.random() * 2000000) + 50000,
          likes: Math.floor(Math.random() * 100000) + 5000,
          comments: Math.floor(Math.random() * 10000) + 500,
          duration: Math.floor(Math.random() * 30) + 15,
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
        {
          video_id: `yt_${Math.random().toString(36).substr(2, 9)}`,
          platform: "youtube",
          title: `–õ—É—á—à–µ–µ –ø—Ä–æ ${context.topic}`,
          description: `–¢–æ–ø–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ ${context.topic} —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.`,
          url: `https://youtube.com/shorts/mock_${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://img.youtube.com/vi/mock3/hqdefault.jpg`,
          views: Math.floor(Math.random() * 1500000) + 25000,
          likes: Math.floor(Math.random() * 75000) + 2500,
          comments: Math.floor(Math.random() * 7500) + 250,
          duration: Math.floor(Math.random() * 30) + 15,
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
      ].slice(0, context.max_results);
      
      logger?.info('‚úÖ [YouTubeSearch] Completed successfully, found videos:', { count: mockVideos.length });
      return {
        success: true,
        videos: mockVideos,
        message: `–ù–∞–π–¥–µ–Ω–æ ${mockVideos.length} –≤–∏–¥–µ–æ –Ω–∞ YouTube`
      };
      
    } catch (error) {
      logger?.error('‚ùå [YouTubeSearch] Search error:', error);
      return {
        success: false,
        videos: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≤ TikTok
export const tiktokSearchTool = createTool({
  id: "tiktok-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –≤ TikTok –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    max_results: z.number().default(3).describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [TikTokSearch] Starting execution with params:', context);
    
    try {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è TikTok API - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TikTok API
      logger?.info('üìù [TikTokSearch] Searching for videos...');
      
      // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
      const mockVideos = [
        {
          video_id: `tt_${Math.random().toString(36).substr(2, 9)}`,
          platform: "tiktok",
          title: `#${context.topic} —Ç—Ä–µ–Ω–¥`,
          description: `–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–æ ${context.topic} –≤ TikTok`,
          url: `https://tiktok.com/@user/video/${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://p16-sign-va.tiktokcdn.com/mock.jpeg`,
          views: Math.floor(Math.random() * 5000000) + 100000,
          likes: Math.floor(Math.random() * 500000) + 10000,
          comments: Math.floor(Math.random() * 50000) + 1000,
          duration: Math.floor(Math.random() * 45) + 15, // 15-60 —Å–µ–∫—É–Ω–¥
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
        {
          video_id: `tt_${Math.random().toString(36).substr(2, 9)}`,
          platform: "tiktok",
          title: `${context.topic} –≤–∞–π–±`,
          description: `–ö—Ä—É—Ç–æ–π ${context.topic} –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏`,
          url: `https://tiktok.com/@user2/video/${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://p16-sign-va.tiktokcdn.com/mock2.jpeg`,
          views: Math.floor(Math.random() * 3000000) + 50000,
          likes: Math.floor(Math.random() * 300000) + 5000,
          comments: Math.floor(Math.random() * 30000) + 500,
          duration: Math.floor(Math.random() * 45) + 15,
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
        {
          video_id: `tt_${Math.random().toString(36).substr(2, 9)}`,
          platform: "tiktok",
          title: `–õ—É—á—à–∏–π ${context.topic}`,
          description: `–¢–æ–ø –≤–∏–¥–µ–æ –ø—Ä–æ ${context.topic} - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!`,
          url: `https://tiktok.com/@user3/video/${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://p16-sign-va.tiktokcdn.com/mock3.jpeg`,
          views: Math.floor(Math.random() * 4000000) + 75000,
          likes: Math.floor(Math.random() * 400000) + 7500,
          comments: Math.floor(Math.random() * 40000) + 750,
          duration: Math.floor(Math.random() * 45) + 15,
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
      ].slice(0, context.max_results);
      
      logger?.info('‚úÖ [TikTokSearch] Completed successfully, found videos:', { count: mockVideos.length });
      return {
        success: true,
        videos: mockVideos,
        message: `–ù–∞–π–¥–µ–Ω–æ ${mockVideos.length} –≤–∏–¥–µ–æ –≤ TikTok`
      };
      
    } catch (error) {
      logger?.error('‚ùå [TikTokSearch] Search error:', error);
      return {
        success: false,
        videos: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ TikTok: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≤ Instagram
export const instagramSearchTool = createTool({
  id: "instagram-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ Reels –≤ Instagram –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    max_results: z.number().default(3).describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [InstagramSearch] Starting execution with params:', context);
    
    try {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Instagram API - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Instagram Basic Display API
      logger?.info('üìù [InstagramSearch] Searching for videos...');
      
      // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
      const mockVideos = [
        {
          video_id: `ig_${Math.random().toString(36).substr(2, 9)}`,
          platform: "instagram",
          title: `${context.topic} Reels`,
          description: `–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ Reels –ø—Ä–æ ${context.topic}. #${context.topic} #reels #trending`,
          url: `https://instagram.com/reel/${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://scontent.cdninstagram.com/mock.jpg`,
          views: Math.floor(Math.random() * 2000000) + 25000,
          likes: Math.floor(Math.random() * 200000) + 2500,
          comments: Math.floor(Math.random() * 20000) + 250,
          duration: Math.floor(Math.random() * 30) + 15, // 15-45 —Å–µ–∫—É–Ω–¥
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
        {
          video_id: `ig_${Math.random().toString(36).substr(2, 9)}`,
          platform: "instagram",
          title: `–¢—Ä–µ–Ω–¥–æ–≤—ã–π ${context.topic}`,
          description: `–í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ ${context.topic}. –°–º–æ—Ç—Ä–∏ –¥–æ –∫–æ–Ω—Ü–∞! #viral #${context.topic}`,
          url: `https://instagram.com/reel/${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://scontent.cdninstagram.com/mock2.jpg`,
          views: Math.floor(Math.random() * 1500000) + 30000,
          likes: Math.floor(Math.random() * 150000) + 3000,
          comments: Math.floor(Math.random() * 15000) + 300,
          duration: Math.floor(Math.random() * 30) + 15,
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
        {
          video_id: `ig_${Math.random().toString(36).substr(2, 9)}`,
          platform: "instagram",
          title: `${context.topic} —Ö–∞–π–ø`,
          description: `–°–∞–º—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ ${context.topic}! #explore #${context.topic} #fyp`,
          url: `https://instagram.com/reel/${Math.random().toString(36).substr(2, 9)}`,
          thumbnail_url: `https://scontent.cdninstagram.com/mock3.jpg`,
          views: Math.floor(Math.random() * 1800000) + 40000,
          likes: Math.floor(Math.random() * 180000) + 4000,
          comments: Math.floor(Math.random() * 18000) + 400,
          duration: Math.floor(Math.random() * 30) + 15,
          published_at: new Date(Date.now() - Math.floor(Math.random() * context.days_ago) * 24 * 60 * 60 * 1000).toISOString(),
        },
      ].slice(0, context.max_results);
      
      logger?.info('‚úÖ [InstagramSearch] Completed successfully, found videos:', { count: mockVideos.length });
      return {
        success: true,
        videos: mockVideos,
        message: `–ù–∞–π–¥–µ–Ω–æ ${mockVideos.length} Reels –≤ Instagram`
      };
      
    } catch (error) {
      logger?.error('‚ùå [InstagramSearch] Search error:', error);
      return {
        success: false,
        videos: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Instagram: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
export const multiPlatformSearchTool = createTool({
  id: "multi-platform-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ —Å—Ä–∞–∑—É –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (YouTube, TikTok, Instagram)",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    videos_per_platform: z.number().default(3).describe("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ —Å –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    all_videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    platform_results: z.object({
      youtube: z.object({
        success: z.boolean(),
        count: z.number(),
        message: z.string(),
      }),
      tiktok: z.object({
        success: z.boolean(),
        count: z.number(),
        message: z.string(),
      }),
      instagram: z.object({
        success: z.boolean(),
        count: z.number(),
        message: z.string(),
      }),
    }),
    total_found: z.number(),
    message: z.string(),
  }),
  execute: async ({ context, mastra, runtimeContext, tracingContext }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [MultiPlatformSearch] Starting execution with params:', context);
    
    try {
      logger?.info('üìù [MultiPlatformSearch] Starting search across all platforms...');
      
      // –ü–æ–∏—Å–∫ –Ω–∞ YouTube
      const youtubeResult = await youtubeSearchTool.execute({
        context: {
          topic: context.topic,
          max_results: context.videos_per_platform,
          days_ago: context.days_ago,
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      // –ü–æ–∏—Å–∫ –≤ TikTok
      const tiktokResult = await tiktokSearchTool.execute({
        context: {
          topic: context.topic,
          max_results: context.videos_per_platform,
          days_ago: context.days_ago,
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      // –ü–æ–∏—Å–∫ –≤ Instagram
      const instagramResult = await instagramSearchTool.execute({
        context: {
          topic: context.topic,
          max_results: context.videos_per_platform,
          days_ago: context.days_ago,
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const allVideos = [
        ...(youtubeResult.videos || []),
        ...(tiktokResult.videos || []),
        ...(instagramResult.videos || []),
      ];
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ engagement (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã + –ª–∞–π–∫–∏ * 2 + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ * 3)
      const sortedVideos = allVideos.sort((a, b) => {
        const engagementA = a.views + (a.likes * 2) + (a.comments * 3);
        const engagementB = b.views + (b.likes * 2) + (b.comments * 3);
        return engagementB - engagementA;
      });
      
      const platformResults = {
        youtube: {
          success: youtubeResult.success,
          count: youtubeResult.videos?.length || 0,
          message: youtubeResult.message,
        },
        tiktok: {
          success: tiktokResult.success,
          count: tiktokResult.videos?.length || 0,
          message: tiktokResult.message,
        },
        instagram: {
          success: instagramResult.success,
          count: instagramResult.videos?.length || 0,
          message: instagramResult.message,
        },
      };
      
      logger?.info('‚úÖ [MultiPlatformSearch] Completed successfully, total videos:', { count: sortedVideos.length });
      return {
        success: true,
        all_videos: sortedVideos,
        platform_results: platformResults,
        total_found: sortedVideos.length,
        message: `–ù–∞–π–¥–µ–Ω–æ ${sortedVideos.length} –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ "${context.topic}" –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö`
      };
      
    } catch (error) {
      logger?.error('‚ùå [MultiPlatformSearch] Search error:', error);
      return {
        success: false,
        all_videos: [],
        platform_results: {
          youtube: { success: false, count: 0, message: "–û—à–∏–±–∫–∞" },
          tiktok: { success: false, count: 0, message: "–û—à–∏–±–∫–∞" },
          instagram: { success: false, count: 0, message: "–û—à–∏–±–∫–∞" },
        },
        total_found: 0,
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});