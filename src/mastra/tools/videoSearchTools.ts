import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";
import Tiktok from "@tobyg74/tiktok-api-dl";
import { TikTokTokenManager } from "../../lib/tiktokTokenManager";
import { createOfficialTikTokSearchTool } from "../../lib/officialTikTokSearch";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ TikTok Token Manager (—Ç—Ä–µ–±—É–µ—Ç OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
const createTikTokTokenManager = () => {
  const config = {
    client_key: process.env.TIKTOK_CLIENT_KEY || '',
    client_secret: process.env.TIKTOK_CLIENT_SECRET || '', 
    redirect_uri: process.env.TIKTOK_REDIRECT_URI || 'http://localhost:8080/auth/tiktok/callback'
  };
  
  return new TikTokTokenManager(config);
};

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≤ YouTube
export const youtubeSearchTool = createTool({
  id: "youtube-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –≤ YouTube Shorts –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    max_results: z.number().default(3).describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [YouTubeSearch] Starting execution with params:', context);
    
    const apiKey = process.env.YOUTUBE_API_KEY;
    if (!apiKey) {
      logger?.error('‚ùå [YouTubeSearch] No YouTube API key found');
      return {
        success: false,
        videos: [],
        message: 'YouTube API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è'
      };
    }
    
    try {
      logger?.info('üìù [YouTubeSearch] Searching for videos via YouTube API...');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ YouTube Data API v3 —Å –†–ê–°–®–ò–†–ï–ù–ù–´–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const searchUrl = new URL('https://www.googleapis.com/youtube/v3/search');
      searchUrl.searchParams.set('key', apiKey);
      searchUrl.searchParams.set('part', 'snippet');
      searchUrl.searchParams.set('type', 'video');
      searchUrl.searchParams.set('q', context.topic);
      searchUrl.searchParams.set('maxResults', (context.max_results * 3).toString()); // –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      searchUrl.searchParams.set('order', 'relevance'); // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ viewCount
      // –ù–ï –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º publishedAfter - –∏—â–µ–º –ª—é–±—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ!
      searchUrl.searchParams.set('videoDuration', 'short'); // –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ (< 4 –º–∏–Ω—É—Ç)
      searchUrl.searchParams.set('safeSearch', 'moderate'); // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫
      searchUrl.searchParams.set('regionCode', 'RU'); // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
      
      logger?.info('üì° [YouTubeSearch] Making API request to YouTube search endpoint');
      
      const searchResponse = await fetch(searchUrl.toString());
      const searchData = await searchResponse.json();
      
      if (!searchResponse.ok || searchData.error) {
        const errorMsg = searchData.error?.message || `HTTP ${searchResponse.status}`;
        logger?.error('‚ùå [YouTubeSearch] API error:', errorMsg);
        return {
          success: false,
          videos: [],
          message: `–û—à–∏–±–∫–∞ YouTube API: ${errorMsg}`
        };
      }
      
      if (!searchData.items || searchData.items.length === 0) {
        logger?.info('‚ÑπÔ∏è [YouTubeSearch] No videos found');
        return {
          success: true,
          videos: [],
          message: `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ "${context.topic}" –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${context.days_ago} –¥–Ω–µ–π`
        };
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
      const videoIds = searchData.items.map((item: any) => item.id.videoId).join(',');
      const detailsUrl = new URL('https://www.googleapis.com/youtube/v3/videos');
      detailsUrl.searchParams.set('key', apiKey);
      detailsUrl.searchParams.set('part', 'statistics,contentDetails');
      detailsUrl.searchParams.set('id', videoIds);
      
      logger?.info('üì° [YouTubeSearch] Getting video details for IDs:', videoIds);
      
      const detailsResponse = await fetch(detailsUrl.toString());
      const detailsData = await detailsResponse.json();
      
      if (!detailsResponse.ok || detailsData.error) {
        const errorMsg = detailsData.error?.message || `HTTP ${detailsResponse.status}`;
        logger?.warn('‚ö†Ô∏è [YouTubeSearch] Details API error, using basic data:', errorMsg);
      }
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ISO 8601 –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (PT1M30S -> 90 —Å–µ–∫—É–Ω–¥)
      const parseDuration = (duration: string): number => {
        const match = duration.match(/PT(?:(\d+)M)?(?:(\d+)S)?/);
        const minutes = parseInt(match?.[1] || '0');
        const seconds = parseInt(match?.[2] || '0');
        return minutes * 60 + seconds;
      };
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
      const videos = searchData.items.map((item: any, index: number) => {
        const details = detailsData.items?.[index];
        const statistics = details?.statistics || {};
        const contentDetails = details?.contentDetails || {};
        
        return {
          video_id: item.id.videoId,
          platform: "youtube",
          title: item.snippet.title,
          description: item.snippet.description || `–í–∏–¥–µ–æ –æ ${context.topic}`,
          url: `https://www.youtube.com/watch?v=${item.id.videoId}`,
          thumbnail_url: item.snippet.thumbnails.medium?.url || item.snippet.thumbnails.default?.url || '',
          views: parseInt(statistics.viewCount || '0'),
          likes: parseInt(statistics.likeCount || '0'),
          comments: parseInt(statistics.commentCount || '0'),
          duration: parseDuration(contentDetails.duration || 'PT0S'),
          published_at: item.snippet.publishedAt,
        };
      });
      
      logger?.info('‚úÖ [YouTubeSearch] Completed successfully, found videos:', { 
        count: videos.length,
        totalViews: videos.reduce((sum: number, v: any) => sum + v.views, 0)
      });
      
      return {
        success: true,
        videos: videos,
        message: `–ù–∞–π–¥–µ–Ω–æ ${videos.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ –Ω–∞ YouTube –ø–æ —Ç–µ–º–µ "${context.topic}"`
      };
      
    } catch (error) {
      logger?.error('‚ùå [YouTubeSearch] Search error:', error);
      return {
        success: false,
        videos: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  },
});

// –£–º–Ω—ã–π TikTok –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API ‚Üí —Å—Ç–∞—Ä—ã–π API)
export const tiktokSearchTool = createTool({
  id: "smart-tiktok-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –≤ TikTok —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º API (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–ª–∏ legacy)",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    max_results: z.number().default(3).describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra, runtimeContext, tracingContext }) => {
    const logger = mastra?.getLogger();
    logger?.warn('‚ö†Ô∏è [SmartTikTokSearch] TikTok –º–æ–¥—É–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã');
    
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù: TikTok API —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    // David Teather's API: –Ω—É–∂–Ω—ã –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ + ms_token —Ç–æ–∫–µ–Ω—ã
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: Fast TikTok API ($0.01/1000) –∏–ª–∏ ScrapTik ($0.002/request)
    
    return {
      success: false,
      videos: [],
      message: `TikTok –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Fast TikTok API ($0.01 –∑–∞ 1000 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∫–∞ YouTube –ø–æ–∏—Å–∫.`
    };
  },
});

// –°–¢–ê–†–´–ô TikTok –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥) - –ó–ê–ú–ï–ù–ï–ù –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã—à–µ
export const legacyTiktokSearchTool = createTool({
  id: "legacy-tiktok-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –≤ TikTok –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    max_results: z.number().default(3).describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [TikTokSearch] Starting execution with params:', context);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookie –¥–ª—è TikTok API
    const tiktokCookie = process.env.TIKTOK_COOKIE;
    const tiktokProxy = process.env.TIKTOK_PROXY;
    
    if (!tiktokCookie) {
      logger?.warn('‚ö†Ô∏è [TikTokSearch] No TikTok cookie found, cannot search real TikTok videos');
      return {
        success: false,
        videos: [],
        message: `TikTok –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã TIKTOK_COOKIE –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TikTok API`
      };
    }
    
    try {
      logger?.info('üìù [TikTokSearch] Searching for videos via TikTok API...');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
      const searchOptions: any = {
        type: "video",
        page: 1,
        cookie: tiktokCookie
      };
      
      if (tiktokProxy) {
        searchOptions.proxy = tiktokProxy;
      }
      
      // –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ TikTok API
      const searchResult: any = await Tiktok.Search(context.topic, searchOptions);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      let videosArray: any[] = [];
      
      if (searchResult?.result?.videos && Array.isArray(searchResult.result.videos)) {
        videosArray = searchResult.result.videos;
      } else if (searchResult?.videos && Array.isArray(searchResult.videos)) {
        videosArray = searchResult.videos;
      } else if (Array.isArray(searchResult)) {
        videosArray = searchResult;
      } else if (searchResult?.data && Array.isArray(searchResult.data)) {
        videosArray = searchResult.data;
      }
      
      if (videosArray.length === 0) {
        logger?.info('‚ÑπÔ∏è [TikTokSearch] No videos found');
        return {
          success: true,
          videos: [],
          message: `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ "${context.topic}" –≤ TikTok`
        };
      }
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      const parseCount = (countStr: any): number => {
        if (!countStr) return 0;
        const str = String(countStr).toLowerCase().replace(/,/g, '');
        if (str.includes('k')) {
          return Math.floor(parseFloat(str.replace('k', '')) * 1000);
        } else if (str.includes('m')) {
          return Math.floor(parseFloat(str.replace('m', '')) * 1000000);
        } else if (str.includes('b')) {
          return Math.floor(parseFloat(str.replace('b', '')) * 1000000000);
        }
        return parseInt(str) || 0;
      };
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ –∏–∑ URL
      const extractVideoId = (url: string): string => {
        if (!url) return `tt_${Math.random().toString(36).substr(2, 9)}`;
        try {
          const urlObj = new URL(url);
          const pathParts = urlObj.pathname.split('/');
          const videoIndex = pathParts.findIndex(part => part === 'video');
          if (videoIndex !== -1 && pathParts[videoIndex + 1]) {
            return pathParts[videoIndex + 1];
          }
          return pathParts.pop() || `tt_${Math.random().toString(36).substr(2, 9)}`;
        } catch {
          return url.split('/').pop() || `tt_${Math.random().toString(36).substr(2, 9)}`;
        }
      };
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const cutoffDate = new Date(Date.now() - context.days_ago * 24 * 60 * 60 * 1000);
      
      const filteredVideos = videosArray
        .filter((video: any) => {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
          if (video.createTime) {
            const publishDate = new Date(video.createTime * 1000);
            return publishDate >= cutoffDate;
          }
          return true; // –û—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –¥–∞—Ç—ã
        })
        .sort((a: any, b: any) => {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)
          const aViews = parseCount((a.stats?.playCount || a.stats?.viewCount || a.views || '0'));
          const bViews = parseCount((b.stats?.playCount || b.stats?.viewCount || b.views || '0'));
          return bViews - aViews;
        })
        .slice(0, context.max_results);
      
      const videos = filteredVideos.map((video: any) => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –æ–±—ä–µ–∫—Ç–∞ stats –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const stats = video.stats || {};
        const views = parseCount(stats.playCount || stats.viewCount || video.views || '0');
        const likes = parseCount(stats.likeCount || video.likes || '0');
        const comments = parseCount(stats.commentCount || video.comments || '0');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        let publishedAt = new Date().toISOString();
        if (video.createTime) {
          publishedAt = new Date(video.createTime * 1000).toISOString();
        } else if (video.published_at) {
          publishedAt = video.published_at;
        }
        
        // –°—Ç—Ä–æ–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è TikTok –≤–∏–¥–µ–æ
        let videoUrl = video.url;
        if (!videoUrl && video.author?.uniqueId && (video.id || video.aweme_id)) {
          videoUrl = `https://www.tiktok.com/@${video.author.uniqueId}/video/${video.id || video.aweme_id}`;
        } else if (!videoUrl) {
          videoUrl = `https://www.tiktok.com/search?q=${encodeURIComponent(context.topic)}`;
        }
        
        return {
          video_id: video.id || video.aweme_id || extractVideoId(video.url),
          platform: "tiktok",
          title: video.title || video.desc || `#${context.topic} –≤–∏–¥–µ–æ`,
          description: video.description || video.desc || `–í–∏–¥–µ–æ –æ ${context.topic} –≤ TikTok`,
          url: videoUrl,
          thumbnail_url: video.cover || video.dynamicCover || video.thumbnail || '',
          views: views,
          likes: likes,
          comments: comments,
          duration: video.duration || 30,
          published_at: publishedAt,
        };
      });
      
      logger?.info('‚úÖ [TikTokSearch] Completed successfully, found videos:', { count: videos.length });
      return {
        success: true,
        videos: videos,
        message: `–ù–∞–π–¥–µ–Ω–æ ${videos.length} –≤–∏–¥–µ–æ –≤ TikTok –ø–æ —Ç–µ–º–µ "${context.topic}"`
      };
      
    } catch (error) {
      logger?.error('‚ùå [TikTokSearch] Search error:', error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ —Å fallback –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return {
        success: false,
        videos: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ TikTok: ${error instanceof Error ? error.message : 'Unknown error'}. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TIKTOK_COOKIE –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API.`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≤ Instagram
export const instagramSearchTool = createTool({
  id: "instagram-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ Reels –≤ Instagram –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    max_results: z.number().default(3).describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [InstagramSearch] Starting execution with params:', context);
    
    try {
      logger?.warn('‚ö†Ô∏è [InstagramSearch] Instagram API not configured - requires Facebook App setup');
      
      // Instagram API —Ç—Ä–µ–±—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ Facebook Developer:
      // 1. –°–æ–∑–¥–∞—Ç—å Facebook App
      // 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Instagram Basic Display API  
      // 3. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      // 4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å OAuth flow
      
      // –í–ê–ñ–ù–û: –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fake –¥–∞–Ω–Ω—ã–µ!
      logger?.info('üìù [InstagramSearch] Returning empty results - no mock data');
      
      return {
        success: false, // –í–∞–∂–Ω–æ! false —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–ª–∞ —á—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        videos: [],
        message: `Instagram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Facebook App`
      };
      
    } catch (error) {
      logger?.error('‚ùå [InstagramSearch] Search error:', error);
      return {
        success: false,
        videos: [],
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Instagram: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
export const multiPlatformSearchTool = createTool({
  id: "multi-platform-search-tool",
  description: "–ò—â–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ —Å—Ä–∞–∑—É –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (YouTube, TikTok, Instagram)",
  inputSchema: z.object({
    topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
    videos_per_platform: z.number().default(3).describe("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ —Å –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"),
    days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    all_videos: z.array(z.object({
      video_id: z.string(),
      platform: z.string(),
      title: z.string(),
      description: z.string(),
      url: z.string(),
      thumbnail_url: z.string(),
      views: z.number(),
      likes: z.number(),
      comments: z.number(),
      duration: z.number(),
      published_at: z.string(),
    })),
    platform_results: z.object({
      youtube: z.object({
        success: z.boolean(),
        count: z.number(),
        message: z.string(),
      }),
      tiktok: z.object({
        success: z.boolean(),
        count: z.number(),
        message: z.string(),
      }),
      instagram: z.object({
        success: z.boolean(),
        count: z.number(),
        message: z.string(),
      }),
    }),
    total_found: z.number(),
    message: z.string(),
  }),
  execute: async ({ context, mastra, runtimeContext, tracingContext }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [MultiPlatformSearch] Starting execution with params:', context);
    
    try {
      logger?.info('üìù [MultiPlatformSearch] Starting search across all platforms...');
      
      // –ü–æ–∏—Å–∫ –Ω–∞ YouTube
      const youtubeResult = await youtubeSearchTool.execute({
        context: {
          topic: context.topic,
          max_results: context.videos_per_platform,
          days_ago: context.days_ago,
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      // –ü–æ–∏—Å–∫ –≤ TikTok
      const tiktokResult = await tiktokSearchTool.execute({
        context: {
          topic: context.topic,
          max_results: context.videos_per_platform,
          days_ago: context.days_ago,
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      // –ü–æ–∏—Å–∫ –≤ Instagram
      const instagramResult = await instagramSearchTool.execute({
        context: {
          topic: context.topic,
          max_results: context.videos_per_platform,
          days_ago: context.days_ago,
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const allVideos = [
        ...(youtubeResult.videos || []),
        ...(tiktokResult.videos || []),
        ...(instagramResult.videos || []),
      ];
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ engagement (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã + –ª–∞–π–∫–∏ * 2 + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ * 3)
      const sortedVideos = allVideos.sort((a, b) => {
        const engagementA = a.views + (a.likes * 2) + (a.comments * 3);
        const engagementB = b.views + (b.likes * 2) + (b.comments * 3);
        return engagementB - engagementA;
      });
      
      const platformResults = {
        youtube: {
          success: youtubeResult.success,
          count: youtubeResult.videos?.length || 0,
          message: youtubeResult.message,
        },
        tiktok: {
          success: tiktokResult.success,
          count: tiktokResult.videos?.length || 0,
          message: tiktokResult.message,
        },
        instagram: {
          success: instagramResult.success,
          count: instagramResult.videos?.length || 0,
          message: instagramResult.message,
        },
      };
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –≤–∏–¥–µ–æ
      const hasAnyVideos = sortedVideos.length > 0;
      const hasAnySuccess = youtubeResult.success || tiktokResult.success || instagramResult.success;
      
      if (!hasAnyVideos) {
        logger?.warn('‚ö†Ô∏è [MultiPlatformSearch] No videos found on any platform!');
        return {
          success: false, // –í–ê–ñ–ù–û! false –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          all_videos: [],
          platform_results: platformResults,
          total_found: 0,
          message: `–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ "${context.topic}" –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. ${Object.values(platformResults).map(p => p.message).join('; ')}`
        };
      }
      
      logger?.info('‚úÖ [MultiPlatformSearch] Completed successfully, total videos:', { count: sortedVideos.length });
      return {
        success: true,
        all_videos: sortedVideos,
        platform_results: platformResults,
        total_found: sortedVideos.length,
        message: `–ù–∞–π–¥–µ–Ω–æ ${sortedVideos.length} –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ "${context.topic}" –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö`
      };
      
    } catch (error) {
      logger?.error('‚ùå [MultiPlatformSearch] Search error:', error);
      return {
        success: false,
        all_videos: [],
        platform_results: {
          youtube: { success: false, count: 0, message: "–û—à–∏–±–∫–∞" },
          tiktok: { success: false, count: 0, message: "–û—à–∏–±–∫–∞" },
          instagram: { success: false, count: 0, message: "–û—à–∏–±–∫–∞" },
        },
        total_found: 0,
        message: `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});