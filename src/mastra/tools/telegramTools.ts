import { createTool } from "@mastra/core/tools";
import type { IMastraLogger } from "@mastra/core/logger";
import { z } from "zod";

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
export const sendTelegramMessageTool = createTool({
  id: "send-telegram-message-tool",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç",
  inputSchema: z.object({
    chat_id: z.number().describe("ID —á–∞—Ç–∞ Telegram"),
    message: z.string().describe("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"),
    parse_mode: z.enum(["HTML", "Markdown", "MarkdownV2"]).optional().describe("–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞"),
    disable_notification: z.boolean().default(false).describe("–û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message_id: z.number().optional(),
    error_code: z.number().optional(),
    error_description: z.string().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [SendTelegramMessage] Starting execution with params:', context);
    
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!botToken) {
        logger?.error('‚ùå [SendTelegramMessage] No TELEGRAM_BOT_TOKEN found');
        return {
          success: false,
          message: "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        };
      }
      
      logger?.info('üìù [SendTelegramMessage] Sending message to Telegram...');
      
      const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
      
      const requestBody = {
        chat_id: context.chat_id,
        text: context.message,
        parse_mode: context.parse_mode,
        disable_notification: context.disable_notification,
      };
      
      const response = await fetch(telegramApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });
      
      const responseData = await response.json();
      
      if (response.ok && responseData.ok) {
        logger?.info('‚úÖ [SendTelegramMessage] Message sent successfully:', { 
          message_id: responseData.result.message_id 
        });
        return {
          success: true,
          message_id: responseData.result.message_id,
          message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        };
      } else {
        logger?.error('‚ùå [SendTelegramMessage] Telegram API error:', responseData);
        return {
          success: false,
          error_code: responseData.error_code,
          error_description: responseData.description,
          message: `–û—à–∏–±–∫–∞ Telegram API: ${responseData.description || 'Unknown error'}`
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [SendTelegramMessage] Network or parsing error:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ (inline keyboard)
export const sendTelegramMessageWithButtonsTool = createTool({
  id: "send-telegram-message-with-buttons-tool",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏",
  inputSchema: z.object({
    chat_id: z.number().describe("ID —á–∞—Ç–∞ Telegram"),
    message: z.string().describe("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"),
    buttons: z.array(z.array(z.object({
      text: z.string().describe("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"),
      callback_data: z.string().describe("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞"),
    }))).describe("–ú–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫"),
    parse_mode: z.enum(["HTML", "Markdown", "MarkdownV2"]).optional().describe("–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message_id: z.number().optional(),
    error_code: z.number().optional(),
    error_description: z.string().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [SendTelegramMessageWithButtons] Starting execution with params:', context);
    
    try {
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!botToken) {
        logger?.error('‚ùå [SendTelegramMessageWithButtons] No TELEGRAM_BOT_TOKEN found');
        return {
          success: false,
          message: "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        };
      }
      
      logger?.info('üìù [SendTelegramMessageWithButtons] Sending message with buttons to Telegram...');
      
      const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
      
      const requestBody = {
        chat_id: context.chat_id,
        text: context.message,
        parse_mode: context.parse_mode,
        reply_markup: {
          inline_keyboard: context.buttons
        }
      };
      
      const response = await fetch(telegramApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });
      
      const responseData = await response.json();
      
      if (response.ok && responseData.ok) {
        logger?.info('‚úÖ [SendTelegramMessageWithButtons] Message with buttons sent successfully:', { 
          message_id: responseData.result.message_id,
          buttons_count: context.buttons.flat().length
        });
        return {
          success: true,
          message_id: responseData.result.message_id,
          message: "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        };
      } else {
        logger?.error('‚ùå [SendTelegramMessageWithButtons] Telegram API error:', responseData);
        return {
          success: false,
          error_code: responseData.error_code,
          error_description: responseData.description,
          message: `–û—à–∏–±–∫–∞ Telegram API: ${responseData.description || 'Unknown error'}`
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [SendTelegramMessageWithButtons] Network or parsing error:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
export const sendStatusMessageTool = createTool({
  id: "send-status-message-tool",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
  inputSchema: z.object({
    chat_id: z.number().describe("ID —á–∞—Ç–∞ Telegram"),
    status: z.enum([
      "search_started", "search_completed", "analysis_started", "analysis_completed",
      "script_generation_started", "script_generated", "script_improved",
      "video_generation_started", "video_completed", "published", "error", "cancelled"
    ]).describe("–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞"),
    additional_info: z.string().optional().describe("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    topic: z.string().optional().describe("–¢–µ–º–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message_id: z.number().optional(),
    status_message: z.string(),
    message: z.string(),
  }),
  execute: async ({ context, mastra, runtimeContext, tracingContext }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [SendStatusMessage] Starting execution with params:', context);
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
      const statusMessages = {
        search_started: `üîç –ò—â—É –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ "${context.topic || '–≤–∞—à–∞ —Ç–µ–º–∞'}"...`,
        search_completed: `‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! ${context.additional_info || '–ù–∞–π–¥–µ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ'}`,
        analysis_started: `üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...`,
        analysis_completed: `‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! ${context.additional_info || '–í—ã—è–≤–ª–µ–Ω—ã —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'}`,
        script_generation_started: `‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π...`,
        script_generated: `üé¨ –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤! ${context.additional_info || '–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö'}`,
        script_improved: `üîß –°—Ü–µ–Ω–∞—Ä–∏–π —É–ª—É—á—à–µ–Ω! ${context.additional_info || '–í–Ω–µ—Å–µ–Ω—ã –≤–∞—à–∏ –ø—Ä–∞–≤–∫–∏'}`,
        video_generation_started: `üé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ...`,
        video_completed: `üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! ${context.additional_info || '–ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}`,
        published: `üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! ${context.additional_info || '–í–∏–¥–µ–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö'}`,
        error: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ${context.additional_info || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'}`,
        cancelled: `‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. ${context.additional_info || '–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'}`
      };
      
      const statusMessage = statusMessages[context.status];
      
      logger?.info('üìù [SendStatusMessage] Sending status message:', { status: context.status });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const result = await sendTelegramMessageTool.execute({
        context: {
          chat_id: context.chat_id,
          message: statusMessage,
          parse_mode: "HTML",
          disable_notification: false,
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      if (result.success) {
        logger?.info('‚úÖ [SendStatusMessage] Status message sent successfully');
        return {
          success: true,
          message_id: result.message_id,
          status_message: statusMessage,
          message: "–°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        };
      } else {
        return {
          success: false,
          status_message: statusMessage,
          message: result.message
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [SendStatusMessage] Error sending status message:', error);
      return {
        success: false,
        status_message: "",
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
export const sendScriptWithActionsTool = createTool({
  id: "send-script-with-actions-tool",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π",
  inputSchema: z.object({
    chat_id: z.number().describe("ID —á–∞—Ç–∞ Telegram"),
    script_text: z.string().describe("–¢–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è"),
    estimated_duration: z.number().optional().describe("–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"),
    show_improve_button: z.boolean().default(true).describe("–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å'"),
    show_video_button: z.boolean().default(true).describe("–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É '–î–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ'"),
    show_cancel_button: z.boolean().default(true).describe("–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message_id: z.number().optional(),
    buttons_added: z.array(z.string()),
    message: z.string(),
  }),
  execute: async ({ context, mastra, runtimeContext, tracingContext }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [SendScriptWithActions] Starting execution with params:', context);
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
      const durationText = context.estimated_duration 
        ? `‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${context.estimated_duration} —Å–µ–∫.\n\n`
        : "";
      
      const fullMessage = `üé¨ <b>–°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤!</b>\n\n${durationText}${context.script_text}\n\nüí≠ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      const buttons = [];
      const buttonsAdded = [];
      
      if (context.show_improve_button) {
        buttons.push([{ text: "üîß –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data: "improve_script" }]);
        buttonsAdded.push("–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å");
      }
      
      if (context.show_video_button) {
        buttons.push([{ text: "üé¨ –î–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ", callback_data: "create_video" }]);
        buttonsAdded.push("–î–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ");
      }
      
      if (context.show_cancel_button) {
        buttons.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_session" }]);
        buttonsAdded.push("–û—Ç–º–µ–Ω–∞");
      }
      
      logger?.info('üìù [SendScriptWithActions] Sending script with action buttons...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      const result = await sendTelegramMessageWithButtonsTool.execute({
        context: {
          chat_id: context.chat_id,
          message: fullMessage,
          buttons: buttons,
          parse_mode: "HTML",
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      if (result.success) {
        logger?.info('‚úÖ [SendScriptWithActions] Script with actions sent successfully');
        return {
          success: true,
          message_id: result.message_id,
          buttons_added: buttonsAdded,
          message: "–°—Ü–µ–Ω–∞—Ä–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        };
      } else {
        return {
          success: false,
          buttons_added: [],
          message: result.message
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [SendScriptWithActions] Error sending script with actions:', error);
      return {
        success: false,
        buttons_added: [],
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export const sendWelcomeMessageTool = createTool({
  id: "send-welcome-message-tool",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞",
  inputSchema: z.object({
    chat_id: z.number().describe("ID —á–∞—Ç–∞ Telegram"),
    user_name: z.string().optional().describe("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"),
    is_returning_user: z.boolean().default(false).describe("–≠—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    message_id: z.number().optional(),
    message: z.string(),
  }),
  execute: async ({ context, mastra, runtimeContext, tracingContext }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [SendWelcomeMessage] Starting execution with params:', context);
    
    try {
      const userName = context.user_name ? `, ${context.user_name}` : "";
      
      let welcomeMessage;
      
      if (context.is_returning_user) {
        welcomeMessage = `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º${userName}!\n\nüé¨ <b>Video Content Agent</b> –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n\nüí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, –∏ —è –Ω–∞–π–¥—É –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –∏ —Å–æ–∑–¥–∞–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π.\n\nüöÄ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ!</b>`;
      } else {
        welcomeMessage = `üéâ –ü—Ä–∏–≤–µ—Ç${userName}!\n\nü§ñ –Ø <b>Video Content Agent</b> - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n<b>–ß—Ç–æ —è —É–º–µ—é:</b>\nüîç –ò—â—É –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –ø–æ –≤–∞—à–µ–π —Ç–µ–º–µ\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏\nüé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ HeyGen\nüöÄ –ü—É–±–ª–∏–∫—É—é –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\n\nüí° <b>–ù–∞—á–Ω–µ–º?</b> –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≤–∏–¥–µ–æ!\n\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "—Ñ–∏—Ç–Ω–µ—Å –¥–æ–º–∞", "—Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫", "–ª–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è —É—á–µ–±—ã"</i>`;
      }
      
      logger?.info('üìù [SendWelcomeMessage] Sending welcome message...');
      
      const result = await sendTelegramMessageTool.execute({
        context: {
          chat_id: context.chat_id,
          message: welcomeMessage,
          parse_mode: "HTML",
          disable_notification: false,
        },
        mastra,
        runtimeContext,
        tracingContext,
      });
      
      if (result.success) {
        logger?.info('‚úÖ [SendWelcomeMessage] Welcome message sent successfully');
        return {
          success: true,
          message_id: result.message_id,
          message: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        };
      } else {
        return {
          success: false,
          message: result.message
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [SendWelcomeMessage] Error sending welcome message:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});