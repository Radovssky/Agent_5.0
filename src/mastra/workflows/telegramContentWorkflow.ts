import { createWorkflow, createStep } from "../inngest";
import { z } from "zod";
import { videoContentAgent } from "../agents/videoContentAgent";

// –®–∞–≥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
const useAgentStep = createStep({
  id: "use-video-content-agent",
  description: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Video Content Agent",
  inputSchema: z.object({
    message: z.string().describe("JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"),
    threadId: z.string().describe("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–µ–¥–∞ –¥–ª—è –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞"),
  }),
  outputSchema: z.object({
    response: z.string(),
    success: z.boolean(),
    error: z.string().optional(),
    originalMessage: z.string(),
  }),
  execute: async ({ inputData, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [UseAgentStep] Starting agent processing with params:', inputData);
    
    try {
      // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
      const telegramData = JSON.parse(inputData.message);
      const userMessage = telegramData?.message?.text || telegramData?.callback_query?.data || "";
      const telegramUserId = telegramData?.message?.from?.id || telegramData?.callback_query?.from?.id;
      const telegramChatId = telegramData?.message?.chat?.id || telegramData?.callback_query?.message?.chat?.id;
      const userName = telegramData?.message?.from?.first_name || telegramData?.callback_query?.from?.first_name;
      const username = telegramData?.message?.from?.username || telegramData?.callback_query?.from?.username;
      
      logger?.info('üìù [UseAgentStep] Extracted message data:', {
        userMessage,
        telegramUserId,
        telegramChatId,
        userName
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
      const contextualMessage = `
TELEGRAM MESSAGE CONTEXT:
- User ID: ${telegramUserId}
- Chat ID: ${telegramChatId}
- User Name: ${userName}
- Username: ${username}
- User Message: "${userMessage}"

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "${userMessage}"

–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É —Ä–∞–±–æ—Ç—ã. –ù–µ –∑–∞–±—É–¥—å—Ç–µ:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ–≤–∞—è —Ç–µ–º–∞, –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏, —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è)
3. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

Telegram User ID: ${telegramUserId}
Telegram Chat ID: ${telegramChatId}
      `;
      
      logger?.info('üìù [UseAgentStep] Calling Video Content Agent...');
      
      // –í—ã–∑—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const { text } = await videoContentAgent.generate([
        { role: "user", content: contextualMessage },
      ], {
        resourceId: "video-content-bot",
        threadId: inputData.threadId,
        maxSteps: 10, // –†–∞–∑—Ä–µ—à–∞–µ–º –∞–≥–µ–Ω—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
      });
      
      logger?.info('‚úÖ [UseAgentStep] Agent processing completed successfully');
      return {
        response: text,
        success: true,
        originalMessage: inputData.message,
      };
      
    } catch (error) {
      logger?.error('‚ùå [UseAgentStep] Agent processing error:', error);
      return {
        response: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}`,
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        originalMessage: inputData.message,
      };
    }
  },
});

// –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –≤ Telegram
const sendReplyStep = createStep({
  id: "send-telegram-reply",
  description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram",
  inputSchema: z.object({
    response: z.string(),
    success: z.boolean(),
    error: z.string().optional(),
    originalMessage: z.string(),
  }),
  outputSchema: z.object({
    sent: z.boolean(),
    message_id: z.number().optional(),
    error: z.string().optional(),
  }),
  execute: async ({ inputData, mastra }) => {
    const logger = mastra?.getLogger();
    logger?.info('üîß [SendReplyStep] Sending agent response to Telegram:', {
      responseLength: inputData.response.length,
      success: inputData.success
    });
    
    try {
      // –ü–∞—Ä—Å–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å chat_id
      const telegramData = JSON.parse(inputData.originalMessage);
      const chatId = telegramData?.message?.chat?.id || telegramData?.callback_query?.message?.chat?.id;
      
      if (!chatId) {
        logger?.error('‚ùå [SendReplyStep] No chat_id found in message');
        return {
          sent: false,
          error: "Chat ID not found"
        };
      }
      
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      if (!botToken) {
        logger?.error('‚ùå [SendReplyStep] No TELEGRAM_BOT_TOKEN found');
        return {
          sent: false,
          error: "TELEGRAM_BOT_TOKEN not configured"
        };
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      let messageToSend = inputData.response;
      if (!inputData.success && inputData.error) {
        messageToSend = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${inputData.error}`;
      }
      
      logger?.info('üìù [SendReplyStep] Sending message via Telegram API...', {
        chatId,
        messageLength: messageToSend.length
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
      const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
      const response = await fetch(telegramApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: messageToSend,
          parse_mode: "HTML",
        }),
      });
      
      const responseData = await response.json();
      
      if (response.ok && responseData.ok) {
        logger?.info('‚úÖ [SendReplyStep] Message sent successfully to Telegram:', { 
          message_id: responseData.result.message_id,
          chat_id: chatId
        });
        return {
          sent: true,
          message_id: responseData.result.message_id,
        };
      } else {
        logger?.error('‚ùå [SendReplyStep] Telegram API error:', responseData);
        return {
          sent: false,
          error: `Telegram API error: ${responseData.description || 'Unknown error'}`
        };
      }
      
    } catch (error) {
      logger?.error('‚ùå [SendReplyStep] Error sending reply:', error);
      return {
        sent: false,
        error: `Failed to send reply: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  },
});

// –û—Å–Ω–æ–≤–Ω–æ–π workflow
export const telegramContentWorkflow = createWorkflow({
  id: "telegram-content-workflow",
  description: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram —á–µ—Ä–µ–∑ Video Content Agent",
  inputSchema: z.object({
    message: z.string().describe("JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"),
    threadId: z.string().describe("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–µ–¥–∞ –¥–ª—è –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞"),
  }),
  outputSchema: z.object({
    success: z.boolean(),
    response: z.string(),
    sent: z.boolean(),
    message_id: z.number().optional(),
    error: z.string().optional(),
  }),
})
  .then(useAgentStep)
  .then(sendReplyStep)
  .commit();