import type { ContentfulStatusCode } from "hono/utils/http-status";

import { registerApiRoute } from "../mastra/inngest";
import { Mastra } from "@mastra/core";

if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.warn(
    "Trying to initialize Telegram triggers without TELEGRAM_BOT_TOKEN. Can you confirm that the Telegram integration is configured correctly?",
  );
}

export type TriggerInfoTelegramOnNewMessage = {
  type: "telegram/message";
  params: {
    userName: string;
    message: string;
  };
  payload: any;
};

export function registerTelegramTrigger({
  triggerType,
  handler,
}: {
  triggerType: string;
  handler: (
    mastra: Mastra,
    triggerInfo: TriggerInfoTelegramOnNewMessage,
  ) => Promise<void>;
}) {
  return [
    registerApiRoute("/webhooks/telegram/action", {
      method: "POST",
      handler: async (c) => {
        const mastra = c.get("mastra");
        const logger = mastra.getLogger();
        try {
          const payload = await c.req.json();

          logger?.info("üìù [Telegram] payload", payload);

          // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ payload —Å –æ—Ç–ª–∞–¥–∫–æ–π
          const message = payload.message?.text || payload.callback_query?.data || payload.edited_message?.text || "";
          const userName = payload.message?.from?.username || payload.callback_query?.from?.username || payload.edited_message?.from?.username || "";
          
          // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ chat ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
          let chatId = null;
          if (payload.message?.chat?.id) {
            chatId = payload.message.chat.id;
          } else if (payload.callback_query?.message?.chat?.id) {
            chatId = payload.callback_query.message.chat.id;
          } else if (payload.edited_message?.chat?.id) {
            chatId = payload.edited_message.chat.id;
          }
          
          // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          logger?.info('üìù [Telegram] Debug info:', {
            hasMessage: !!payload.message,
            hasCallbackQuery: !!payload.callback_query,
            hasEditedMessage: !!payload.edited_message,
            extractedChatId: chatId,
            extractedMessage: message,
            extractedUserName: userName
          });
          const botToken = process.env.TELEGRAM_BOT_TOKEN;
          
          if (chatId && botToken) {
            try {
              if (message === '/start') {
                await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: chatId,
                    text: 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø Video Content Agent.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ, –∏ —è –Ω–∞–π–¥—É –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ–ª–∏–∫–∏, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∏ —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∏—Ü—Ü—É –¥–æ–º–∞"'
                  })
                });
                logger?.info('‚úÖ [Telegram] Sent /start reply');
              } else if (message && message.length > 0) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: chatId,
                    text: `üîç –ò—â—É –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ: "${message}"...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`
                  })
                });
                logger?.info('‚úÖ [Telegram] Sent processing message');
                
                // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ø—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∞–≥–µ–Ω—Ç–∞
                try {
                  logger?.info('üîß [Telegram] Starting direct processing to bypass agent issue...');
                  
                  // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ YouTube
                  const youtubeApiKey = process.env.YOUTUBE_API_KEY;
                  if (youtubeApiKey) {
                    const searchUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(message)}&type=video&order=viewCount&maxResults=3&key=${youtubeApiKey}`;
                    const searchResponse = await fetch(searchUrl);
                    const searchData = await searchResponse.json();
                    
                    if (searchData.items && searchData.items.length > 0) {
                      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
                      const videoList = searchData.items.map((item: any, index: number) => {
                        const title = item.snippet.title;
                        const channel = item.snippet.channelTitle;
                        const videoId = item.id.videoId;
                        return `${index + 1}. **${title}**\n   –ö–∞–Ω–∞–ª: ${channel}\n   https://youtube.com/watch?v=${videoId}`;
                      }).join('\n\n');
                      
                      // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
                      const scriptTitle = `${message}: –í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç`;
                      const scriptHook = `–í—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ, —á—Ç–æ —è –æ–±–Ω–∞—Ä—É–∂–∏–ª, –∏–∑—É—á–∞—è ${message}! –°–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É —Å–µ–∫—Ä–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ø–æ–≤—ã–µ –±–ª–æ–≥–µ—Ä—ã.`;
                      const scriptContent = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ ${searchData.items.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ "${message}", —è –≤—ã—è–≤–∏–ª –≥–ª–∞–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞. –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞: –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π —Ö—É–∫ –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏ —á–µ—Ç–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é.`;
                      const scriptCTA = `–ï—Å–ª–∏ —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω - —Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫! –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–∞–∫–∏—Ö —Ä–∞–∑–±–æ—Ä–æ–≤ - –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å! –ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, –∫–∞–∫—É—é —Ç–µ–º—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–π!`;
                      
                      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                      const fullResponse = `üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –ü–û–ü–£–õ–Ø–†–ù–´–ï –í–ò–î–ï–û:\n\n${videoList}\n\nüìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô:\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${scriptTitle}\n\n–•—É–∫ (–ø–µ—Ä–≤—ã–µ 5 —Å–µ–∫—É–Ω–¥):\n${scriptHook}\n\n–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${scriptContent}\n\n–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é:\n${scriptCTA}\n\n‚ú® –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ YouTube`;
                      
                      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
                      if (fullResponse.length > 4000) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω–æ
                        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                            chat_id: chatId,
                            text: `üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –ü–û–ü–£–õ–Ø–†–ù–´–ï –í–ò–î–ï–û:\n\n${videoList}`
                          })
                        });
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ
                        const scriptResponse = `üìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô:\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${scriptTitle}\n\n–•—É–∫ (–ø–µ—Ä–≤—ã–µ 5 —Å–µ–∫—É–Ω–¥):\n${scriptHook}\n\n–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${scriptContent}\n\n–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é:\n${scriptCTA}\n\n‚ú® –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ YouTube`;
                        
                        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                            chat_id: chatId,
                            text: scriptResponse
                          })
                        });
                        
                      } else {
                        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                            chat_id: chatId,
                            text: fullResponse
                          })
                        });
                      }
                      
                      logger?.info('‚úÖ [Telegram] Successfully sent direct response with videos and script');
                      
                    } else {
                      throw new Error('No videos found');
                    }
                  } else {
                    throw new Error('YouTube API key not available');
                  }
                  
                } catch (directError) {
                  logger?.error('‚ùå [Telegram] Direct processing failed:', directError);
                  
                  // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                  await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      chat_id: chatId,
                      text: `‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ "${message}". \n\n–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.\n\nüîß –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ.`
                    })
                  });
                  
                  logger?.info('‚úÖ [Telegram] Sent fallback error message');
                }
              }
            } catch (error) {
              logger?.error('‚ùå [Telegram] Failed to send immediate reply:', error);
            }
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º workflow –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
          handler(mastra, {
            type: triggerType,
            params: {
              userName,
              message,
            },
            payload,
          } as TriggerInfoTelegramOnNewMessage).catch(error => {
            logger?.error('‚ùå [Telegram] Workflow failed:', error);
          });

          return c.text("OK", 200);
        } catch (error) {
          logger?.error("Error handling Telegram webhook:", error);
          return c.text("Internal Server Error", 500);
        }
      },
    }),
  ];
}
