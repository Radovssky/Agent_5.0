import type { ContentfulStatusCode } from "hono/utils/http-status";

import { registerApiRoute } from "../mastra/inngest";
import { Mastra } from "@mastra/core";

if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.warn(
    "Trying to initialize Telegram triggers without TELEGRAM_BOT_TOKEN. Can you confirm that the Telegram integration is configured correctly?",
  );
}

export type TriggerInfoTelegramOnNewMessage = {
  type: "telegram/message";
  params: {
    userName: string;
    message: string;
  };
  payload: any;
};

export function registerTelegramTrigger({
  triggerType,
  handler,
}: {
  triggerType: string;
  handler: (
    mastra: Mastra,
    triggerInfo: TriggerInfoTelegramOnNewMessage,
  ) => Promise<void>;
}) {
  return [
    registerApiRoute("/webhooks/telegram/action", {
      method: "POST",
      handler: async (c) => {
        const mastra = c.get("mastra");
        const logger = mastra.getLogger();
        try {
          const payload = await c.req.json();

          logger?.info("üìù [Telegram] payload", payload);

          // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ payload —Å –æ—Ç–ª–∞–¥–∫–æ–π
          const message = payload.message?.text || payload.callback_query?.data || payload.edited_message?.text || "";
          const userName = payload.message?.from?.username || payload.callback_query?.from?.username || payload.edited_message?.from?.username || "";
          
          // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ chat ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
          let chatId = null;
          if (payload.message?.chat?.id) {
            chatId = payload.message.chat.id;
          } else if (payload.callback_query?.message?.chat?.id) {
            chatId = payload.callback_query.message.chat.id;
          } else if (payload.edited_message?.chat?.id) {
            chatId = payload.edited_message.chat.id;
          }
          
          // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          logger?.info('üìù [Telegram] Debug info:', {
            hasMessage: !!payload.message,
            hasCallbackQuery: !!payload.callback_query,
            hasEditedMessage: !!payload.edited_message,
            extractedChatId: chatId,
            extractedMessage: message,
            extractedUserName: userName
          });
          const botToken = process.env.TELEGRAM_BOT_TOKEN;
          
          if (chatId && botToken) {
            try {
              if (message === '/start') {
                await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: chatId,
                    text: 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø Video Content Agent.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ, –∏ —è –Ω–∞–π–¥—É –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–æ–ª–∏–∫–∏, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –∏ —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∏—Ü—Ü—É –¥–æ–º–∞"'
                  })
                });
                logger?.info('‚úÖ [Telegram] Sent /start reply');
              } else if (message && message.length > 0) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: chatId,
                    text: `üîç –ò—â—É –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ: "${message}"...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`
                  })
                });
                logger?.info('‚úÖ [Telegram] Sent processing message');
              }
            } catch (error) {
              logger?.error('‚ùå [Telegram] Failed to send immediate reply:', error);
            }
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º workflow –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
          handler(mastra, {
            type: triggerType,
            params: {
              userName,
              message,
            },
            payload,
          } as TriggerInfoTelegramOnNewMessage).catch(error => {
            logger?.error('‚ùå [Telegram] Workflow failed:', error);
          });

          return c.text("OK", 200);
        } catch (error) {
          logger?.error("Error handling Telegram webhook:", error);
          return c.text("Internal Server Error", 500);
        }
      },
    }),
  ];
}
