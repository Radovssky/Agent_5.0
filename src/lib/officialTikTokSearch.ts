/**
 * Official TikTok API Search Tool
 * Uses TikTok for Developers API with stable 24-hour tokens
 */

import { createTool } from "@mastra/core/tools";
import { z } from "zod";
import { TikTokTokenManager, TikTokApiConfig } from "./tiktokTokenManager";

export interface OfficialTikTokVideo {
  id: string;
  title: string;
  video_description: string;
  duration: number;
  cover_image_url: string;
  embed_html: string;
  embed_link: string;
  like_count: number;
  comment_count: number;
  share_count: number;
  view_count: number;
  create_time: number;
}

export interface TikTokSearchResponse {
  data: {
    videos: OfficialTikTokVideo[];
    cursor: number;
    has_more: boolean;
  };
  error?: {
    code: string;
    message: string;
    log_id: string;
  };
}

/**
 * Official TikTok Search using TikTok for Developers API
 */
export const createOfficialTikTokSearchTool = (tokenManager: TikTokTokenManager) => {
  return createTool({
    id: "official-tiktok-search-tool",
    description: "–ü–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ TikTok —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞–º–∏",
    inputSchema: z.object({
      topic: z.string().describe("–¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ"),
      max_results: z.number().default(3).describe("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
      days_ago: z.number().default(10).describe("–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"),
    }),
    outputSchema: z.object({
      success: z.boolean(),
      videos: z.array(z.object({
        video_id: z.string(),
        platform: z.string(),
        title: z.string(),
        description: z.string(),
        url: z.string(),
        thumbnail_url: z.string(),
        views: z.number(),
        likes: z.number(),
        comments: z.number(),
        duration: z.number(),
        published_at: z.string(),
      })),
      message: z.string(),
    }),
    execute: async ({ context, mastra }) => {
      const logger = mastra?.getLogger();
      logger?.info('üîç [OfficialTikTokSearch] Starting search with official API:', context);

      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const accessToken = await tokenManager.getValidToken();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º TikTok Research API –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ
        const searchUrl = 'https://open.tiktokapis.com/v2/research/video/query/';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
        const requestBody = {
          query: {
            and: [
              {
                operation: "IN",
                field_name: "keyword",
                field_values: [context.topic]
              }
            ]
          },
          max_count: Math.min(context.max_results, 100), // API –ª–∏–º–∏—Ç 100
          start_date: new Date(Date.now() - context.days_ago * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          end_date: new Date().toISOString().split('T')[0],
          fields: [
            "id",
            "title", 
            "video_description",
            "duration",
            "cover_image_url",
            "embed_html",
            "embed_link",
            "like_count",
            "comment_count", 
            "share_count",
            "view_count",
            "create_time"
          ]
        };

        logger?.info('üì° [OfficialTikTokSearch] Making API request to TikTok Research API');

        const response = await fetch(searchUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
          const errorText = await response.text();
          logger?.error('‚ùå [OfficialTikTokSearch] API request failed:', { 
            status: response.status, 
            error: errorText 
          });
          
          // Fallback message instead of throwing
          return {
            success: false,
            videos: [],
            message: `–û—à–∏–±–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ TikTok API: ${response.status}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.`
          };
        }

        const searchResponse: TikTokSearchResponse = await response.json();
        
        if (searchResponse.error) {
          logger?.error('‚ùå [OfficialTikTokSearch] TikTok API error:', searchResponse.error);
          return {
            success: false,
            videos: [],
            message: `TikTok API –æ—à–∏–±–∫–∞: ${searchResponse.error.message}`
          };
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        const videos = searchResponse.data.videos
          .sort((a, b) => b.view_count - a.view_count) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
          .slice(0, context.max_results)
          .map(video => ({
            video_id: video.id,
            platform: "tiktok",
            title: video.title || `TikTok ${context.topic}`,
            description: video.video_description || `–í–∏–¥–µ–æ –æ ${context.topic} –≤ TikTok`,
            url: video.embed_link || `https://www.tiktok.com/search?q=${encodeURIComponent(context.topic)}`,
            thumbnail_url: video.cover_image_url || '',
            views: video.view_count || 0,
            likes: video.like_count || 0,
            comments: video.comment_count || 0,
            duration: video.duration || 30,
            published_at: new Date(video.create_time * 1000).toISOString(),
          }));

        logger?.info('‚úÖ [OfficialTikTokSearch] Completed successfully', { 
          found: videos.length,
          total_available: searchResponse.data.videos.length 
        });

        return {
          success: true,
          videos: videos,
          message: `–ù–∞–π–¥–µ–Ω–æ ${videos.length} –≤–∏–¥–µ–æ –≤ TikTok —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –ø–æ —Ç–µ–º–µ "${context.topic}"`
        };

      } catch (error) {
        logger?.error('‚ùå [OfficialTikTokSearch] Search error:', error);
        
        return {
          success: false,
          videos: [],
          message: `–û—à–∏–±–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ TikTok API: ${error instanceof Error ? error.message : 'Unknown error'}`
        };
      }
    },
  });
};